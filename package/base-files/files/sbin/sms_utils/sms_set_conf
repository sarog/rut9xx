#!/usr/bin/env lua

require "teltonika_lua_functions"
require("uci")
local os = require("os")
local io = require("io")
require("luci.ip")
local datatype = require "luci.cbi.datatypes"

local uci = uci.cursor()
local UCIconfig = {}
local max_sms
local DHsertificate = {}
local max_dh
local ServerKey = {}
local max_key
local ServerCert = {}
local max_cert
local CAsertificate = {}
local max_ca
local SECRsertificate = {}
local max_secr
local debug_level = 1
local setting_nr
local setting_value
local check
local dot
local vpn_tap
local vpn_check = 0

local require_uci_reboot = false
local require_cert_reboot = false
local usig_certificates = false

local fail_counter = 0

function debug(level, string)
	if debug_level >= level then
		os.execute("/usr/bin/logger -t sms_set_conf -s " .. string)
	end
end

function fileExists(path, name)
	local string = "ls ".. path
	local h = io.popen(string)
	local t = h:read("*all")
	h:close()

	for i in string.gmatch(t, "%S+") do
		if i == name then
			return 1
		end
	end
end

function delSMS(index)
	os.execute("/usr/sbin/gsmctl -S -d " .. index)
end

function fill_tables(text, index)
	debug(2, "Filling tables ...")
	local config_tag, sms_num, max_num = string.match(text, '(%a+):(%d+)-(%d+)')
	local uci_commands = string.match(text, ',%s.-$')
	local crtf_part = string.match(text, '\n.-$')

	sms_num = tonumber(sms_num)

	if config_tag == "CONF" then
		delSMS(index)
		debug(2, "Filling uci config table...")
		UCIconfig[sms_num] = uci_commands
		if not max_sms then
			debug(2, "max num sms: " .. max_num)
			max_sms = tonumber(max_num)
		end
	elseif config_tag == "DHPAR" then
		debug(2, "Filling Diffie Hellman parameters table... Tag: DHPAR.")
		usig_certificates = true
		delSMS(index)
		DHsertificate[sms_num] = crtf_part
		if not max_dh then
			max_dh = tonumber(max_num)
		end
	elseif config_tag == "PRIVAT" then
		debug(2, "Filling key table... TAG: PRIVAT.")
		usig_certificates = true
		delSMS(index)
		ServerKey[sms_num] = crtf_part
		if not max_key then
			max_key = tonumber(max_num)
		end
	elseif config_tag == "SRVR" then
		debug(2, "Filling certificate table... TAG: SRVR.")
		usig_certificates = true
		delSMS(index)
		--debug(2, sms_num .." parts of " ..max_num)
		ServerCert[sms_num] = crtf_part
		if not max_cert then
			max_cert = tonumber(max_num)
		end
	elseif config_tag == "CRTF" then
		debug(2, "Filling Certificate authority table... TAG: CRTF.")
		usig_certificates = true
		delSMS(index)
		CAsertificate[sms_num] = crtf_part
		if not max_ca then
			max_ca = tonumber(max_num)
		end
	elseif config_tag == "SECR" then
		debug(2, "Filling  Static pre-shared key table... TAG: SECR.")
		usig_certificates = true
		delSMS(index)
		SECRsertificate[sms_num] = crtf_part
		if not max_secr then
			max_secr = tonumber(max_num)
		end
	end

end

function set_uci_config()
	if max_sms and #UCIconfig == max_sms then
		local wan_ifname
		debug(1, "Setting uci config ...")
		debug(1, "UCI: "..#UCIconfig.. ", max_sms " ..max_sms)

		for key,value in pairs(UCIconfig) do
 			debug(3, "value: " .. value)

			--if value:find("network.wan.ifname") then
			--	local setting_wan_wired = value:match("network.wan.ifname=eth1")
			--	local setting_wan_mobile = value:match("network.wan.ifname=")
--
			--	if setting_wan_wired then
 			--		debug(3, "setting_wan_wired: " .. setting_wan_wired)
			--		local mobile_ifname = get_wan_section("type", "wired")
--
			--		if mobile_ifname and mobile_ifname ~= "wan" then
			--			ifname = mobile_ifname
			--			debug(1, "Section type wired interface is " ..ifname)
			--		end
			--	elseif setting_wan_mobile then
-- 			--		debug(1, "else wan type mobile")
			--		local mobile_ifname = get_wan_section("type", "mobile")
			--		if mobile_ifname and mobile_ifname ~= "wan" then
			--			ifname = mobile_ifname
			--			debug(1, "Section type mobile interface is " ..ifname)
			--		end
			--	end
			--end
			if value:find("openvpn") and value:find("dev=\'tap\'") or value:find("dev=tap") then
				local tap = os.execute("cat /etc/config/openvpn | grep \"option dev 'tap'\"")
				if tonumber(tap) == 0 then
					local vpn, vpn2 = value:find(".dev=tap") or value:find(".dev=\'tap\'")
					vpn_tap = value:sub(1, vpn-1)
					vpn_tap = vpn_tap:reverse()
					vpn_tap = vpn_tap:sub(1, vpn_tap:find(" ")-1)
					vpn_tap = vpn_tap:reverse()
					vpn_check = 1
				end
			end
		end

		for key,value in pairs(UCIconfig) do
-- 			debug(1, "KEY==".. key)

			for option in string.gmatch(value, "[^,]+") do
				check = 0
-- 				debug(1, "OPTION==".. option)

				if ifname then
					option = option:gsub("network.wan", string.format("network.%s", ifname))
-- 					debug(1, "wan changed " .. option)
				end
-- 				debug(1, "OPTION==".. option .." ifname== ".. ifname)
				option = option:gsub("=", "=\"") .. "" .."\""

				--setting = option:find("ipaddr")
				if option:find("ipaddr") or option:find("netmask") or option:find("gateway") or option:find("broadcast") then
					check = 1
				end

				dot = option:find("'")
				if dot then
					option = option:gsub("'", "")
					dot = nil
				end

				if check == 1 then
					setting_nr = option:find("=")
                    setting_value = option:sub(setting_nr+1)
					setting_value = setting_value:sub(2, #setting_value-1)
					if luci.ip.IPv4(setting_value) then
						debug(1, "uci set " ..option)
						os.execute(string.format("uci set %s", option))
					else
						debug(1, setting_value.." uci cannot be set because of incorrect datatype")
					end
				elseif vpn_check == 1 and option:find(vpn_tap) then
					debug(1, "uci cannot be set because vpn tap instance is already created")
				else
					debug(1, "uci set " ..option)
					os.execute(string.format("uci set %s", option))
				end
			end
			if key == tonumber(max_sms) then
				os.execute("uci commit")
				require_uci_reboot = true
				UCIconfig = {}
				sleep(10)
			end
		end
	else
		if max_sms then
			debug(1, "Only " .. #UCIconfig.. " cofiguration messages of " ..max_sms .. " received")
		end
		fail_counter = fail_counter + 1
	end
end

function build_certificates()
	debug(2, "Building certificates...")
	local section = "client_sms"
	uci:foreach("openvpn", "openvpn",
		function(s)
			if s[".name"] == "server_sms" then
				section = "server_sms"
			elseif 	s[".name"] == "client_sms" then
				section = "client_sms"
			end
		end)
	local dh= uci:get("openvpn", section, "dh") --Diffie Hellman parameters
	local ca= uci:get("openvpn", section, "ca") --Certificate authority
	local key= uci:get("openvpn", section, "key") --Client or server key
	local cert= uci:get("openvpn", section, "cert") --Client or server certificate
	local secr= uci:get("openvpn", section, "secret") --Static pre-shared key
	local list = {
		{certificate = DHsertificate, path = dh, max_num = max_dh},
		{certificate = ServerKey, path = key, max_num = max_key},
		{certificate = CAsertificate, path = ca, max_num = max_ca},
		{certificate = ServerCert, path = cert, max_num = max_cert},
		{certificate = SECRsertificate, path = secr, max_num = max_secr}
	}

	for key,value in pairs(list) do
		if value.path and value.max_num then
			if #value.certificate > 0 and #value.certificate == value.max_num then
				debug(1, "Deleting old sertificate at " ..value.path)
				os.remove(value.path)
				file = io.open (value.path , "a+")
				if file then
					debug(1, "Writing sertificate to " ..value.path)
					for num, text in pairs(value.certificate) do
						--print(value)
						file:write(text)
					end
					file:write("\n")
					file:close()
					require_cert_reboot = true
				end
			else
				if  value.max_num and value.dh then
					debug(1, "Only " .. #value.certificate .. " " .. value.dh .. " messages of " ..value.max_num .. " received")
				end
				require_cert_reboot = false
				fail_counter = fail_counter + 1
			end
		end
	end
end

debug(1, "Starting...")

while true do
	if fileExists("/tmp/", "sms_configure") then
		local sms_file = "/var/sms_configure"
		local empty = true
		file = io.open(sms_file, "r")

		if file then
			for line in file:lines() do
				empty = false

				os.execute("sed -i -e \"1d\" " .. sms_file)
				print(line)
				debug(2, "Reading mesage " .. line)
				output = assert (io.popen("/usr/sbin/gsmctl  -S -r " .. line))

				local index
				local sms_date
				local sender
				local text = ""
				local status

				for line in output:lines() do
					local smsLine = string.match(line, '(%a+):%s')

					if smsLine == "Index" then
						index = string.match(line, '%d+')
						debug(2, "index "..index)
					elseif smsLine == "Date" then
						debug(2, "date")
					elseif smsLine == "Sender" then
						sender = string.match(line, '%+.*')
						debug(2, "sender "..sender)
					elseif smsLine == "Text" then
						text = string.match(line, '%s.*')
						debug(2, "text " ..text)
					elseif smsLine == "Status" then
						status = string.match(line, '%s.*')
						debug(2, "status " ..status)
					elseif string.find(line, '%-%-%-%-%-%-%-%-%-%-%-%-%-%-%-') then
						debug(2, text)
						--delSMS(index)
						fill_tables(text, index)
					elseif line then
						text = text.. "\n" ..line
					end

					smsLine = ""
				end

				if index and text ~= "" then
					fill_tables(text, index)
				end

				output:close()
			end

		end
		file:close()

		if not empty then
			set_uci_config()

			if require_uci_reboot then
				build_certificates()
			end
		end
	else
		fail_counter = fail_counter + 1
	end



	if (require_uci_reboot and not usig_certificates) or (usig_certificates and require_cert_reboot) then
		uci:set("sms_utils", "message", "set_enabled", "0")
		uci:commit("sms_utils")
		debug(1, "rebooting...")
-- 		os.execute("[ \"$(uci -q get teltonika.sys.first_login)\" == \"1\" ] && (. /lib/teltonika-functions.sh; [ -z $(get_ext_vidpid_tlt) ] || (uci -q delete teltonika.sys.first_login; uci commit))")
-- 		os.execute("reboot")
		os.execute("/sbin/luci-reload")
		return
	end

	if fail_counter > 30 then
		uci:set("sms_utils", "message", "set_enabled", "0")
		uci:commit("sms_utils")
		debug(1, "Stoping, lost message.")
		return
	end
	debug(2, "Waiting...")
	sleep(10)
end

