--- a/src/system.h
+++ b/src/system.h
@@ -112,6 +112,11 @@
 #include <signal.h>
 #endif
 
+#ifdef HAVE_SYS_SYSINFO_H
+#define _LINUX_SYSINFO_H
+#include <sys/sysinfo.h>
+#endif
+
 #ifdef HAVE_INTTYPES_H
 #define __STDC_FORMAT_MACROS
 #include <inttypes.h>
@@ -129,15 +134,6 @@
 #include <linux/un.h>
 #endif
 
-#ifdef HAVE_SYS_SYSINFO_H
-#include <sys/sysinfo.h>
-#else
-#ifdef HAVE_LINUX_SYSINFO_H
-#define _LINUX_KERNEL_H
-#include <linux/sysinfo.h>
-#endif
-#endif
-
 #elif defined (__FreeBSD__)  || defined (__APPLE__) || defined (__OpenBSD__) || defined (__NetBSD__)
 #include <net/if.h>
 #include <net/bpf.h>
--- a/src/redir.c
+++ b/src/redir.c
@@ -3843,11 +3843,13 @@ int redir_main(struct redir_t *redir,
   }
 
 #define redir_memcopy(msgtype)                                          \
+  do {									\
   redir_challenge(challenge);                                           \
   redir_chartohex(challenge, hexchal, REDIR_MD5LEN);                    \
   msg.mtype = msgtype;                                                  \
   memcpy(conn.s_state.redir.uamchal, challenge, REDIR_MD5LEN);          \
-  if (_options.debug) syslog(LOG_DEBUG, "%s(%d): ---->>> resetting challenge: %s", __FUNCTION__, __LINE__, hexchal)
+  if (_options.debug) syslog(LOG_DEBUG, "%s(%d): ---->>> resetting challenge: %s", __FUNCTION__, __LINE__, hexchal);						    \
+  } while (0)
 
 #ifdef USING_IPC_UNIX
 #define redir_msg_send(msgopt)                                          \
@@ -4657,7 +4659,7 @@ int redir_main(struct redir_t *redir,
 
         if (!hasnexturl) {
           if (_options.challengetimeout)
-          redir_memcopy(REDIR_CHALLENGE);
+          	redir_memcopy(REDIR_CHALLENGE);
         } else {
           msg.mtype = REDIR_TRIALLOGIN_FAILED;
         }
