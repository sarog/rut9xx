#!/bin/sh

. /lib/functions.sh

get_tunnel() {

	#get old config
	config_get_bool enabled 			"$1" "enabled" 				"0"
	config_get 		mtu 				"$1" "mtu"
	config_get 		ttl 				"$1" "ttl"
	config_get_bool df 					"$1" "pmtud"
	config_get 		peeraddr			"$1" "remote_ip"
	config_get 		target 				"$1" "remote_network"
	config_get 		route_netmask 		"$1" "remote_netmask"
	config_get 		ipaddr  			"$1" "tunnel_ip"
	config_get 		netmask 			"$1" "tunnel_netmask"
	config_get 		keep_alive 			"$1" "keepalive"
	config_get 		keep_alive_interval "$1" "keepalive_interval"
	config_get 		sim 				"$1" "sim"

	netmask=`ipcalc.sh $ipaddr/$netmask| grep NETMASK | cut -d= -f2`
	route_netmask=`ipcalc.sh $target/$route_netmask| grep NETMASK | cut -d= -f2`

	#set new config structure

	name=$1
	name=${name:4:10}
	disabled=0
	[ "$enabled" -eq 1 ] || disabled=1

	uci_add "network" "interface"		"${name}"
	uci_set "network" $CONFIG_SECTION 	"proto" 				"gre"
	uci_set "network" $CONFIG_SECTION 	"disabled" 				"$disabled"
	uci_set "network" $CONFIG_SECTION 	"peeraddr" 				"$peeraddr"
	uci_set "network" $CONFIG_SECTION 	"mtu" 					"$mtu"
	if [ "df" = "0" ]; then
		uci_set "network" $CONFIG_SECTION 	"ttl" 					"$ttl"
	else
		uci_set "network" $CONFIG_SECTION 	"df" 					"0"
	fi

	uci_set "network" $CONFIG_SECTION 	"keep_alive" 			"$keep_alive"
	uci_set "network" $CONFIG_SECTION 	"keep_alive_interval"	"$keep_alive_interval"


	uci_add "network" "interface" 		"${name}_static"
	uci_set "network" $CONFIG_SECTION	"ipaddr" 	"$ipaddr"
	uci_set "network" $CONFIG_SECTION 	"netmask" 	"$netmask"
	uci_set "network" $CONFIG_SECTION 	"proto" 	"static"
	uci_set "network" $CONFIG_SECTION 	"ifname" 	"@${name}"


	[ -z "$target" -o -z "$route_netmask" ] || {
		uci_add "network" "route"
		uci_set "network" $CONFIG_SECTION "dep" 				"${name}"
		uci_set "network" $CONFIG_SECTION "interface" 			"${name}_static"
		uci_set "network" $CONFIG_SECTION "target" 				"$target"
		uci_set "network" $CONFIG_SECTION "netmask" 			"$route_netmask"
	}

	uci_commit "network"
	uci_remove "gre_tunnel" $1
	uci_commit "gre_tunnel"
}

delete_rules() {
	config_get eventMark "$1" "eventMark"
	if [ "$eventMark" = "gre tunnel" ]; then
		uci_remove "events_reporting" $1
		uci_commit "events_reporting"
	fi
}
config_load 'gre_tunnel'
config_foreach get_tunnel 'gre_tunnel'
config_load 'events_reporting'
config_foreach delete_rules 'rule'
exit 0
