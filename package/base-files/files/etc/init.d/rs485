#!/bin/sh /etc/rc.common

USE_PROCD=1
START=14
STOP=99

SERIAL="rs485"
ENABLED=`uci -q get rs."$SERIAL".enabled`

check_value(){
	value="$1"
	variable="$2"

	if [ "$value" == "" ]; then
		echo "$value"
	else
		echo "-$variable "$value""
	fi
}

if [ "$ENABLED" = "1" ]; then
	TYPE=`uci -q get rs."$SERIAL".type`
	SPEED=`uci -q get rs."$SERIAL".baudrate`
	DBITS=`uci -q get rs."$SERIAL".databits`
	PARITY=`uci -q get rs."$SERIAL".parity`
	SBITS=`uci -q get rs."$SERIAL".stopbits`
	FCTRL=`uci -q get rs."$SERIAL".flowcontrol`
	
	case "$PARITY" in
		"none")	PARITY_TMP="-parenb -parodd";;
		"odd")	PARITY_TMP="parenb parodd";;
		"even")	PARITY_TMP="parenb -parodd";;
		*)		PARITY_TMP="-parenb -parodd";;
	esac

	case "$SBITS" in
		1) SBITS_TMP="-cstopb";;
		2) SBITS_TMP="cstopb";;
		*) SBITS_TMP="-cstopb";;
	esac

	case "$FCTRL" in
		"none")		FCTRL_TMP="-crtscts -ixon -ixoff";;
		"rts/cts")	FCTRL_TMP="crtscts -ixon -ixoff";;
		"xon/xoff")	FCTRL_TMP="-crtscts ixon ixoff";;
		*)			FCTRL_TMP="-crtscts -ixon -ixoff";;
	esac
	
	if [ "$TYPE" != "console" ]; then
		#if type is not console, check and kill all earler console processes thats left
		pids=`ps | grep [-]ash | awk '{print $1}'`
		for i in "${pids}"
		do
			kill -9 $i
		done
	fi
	
	FCTRL_TMP="$FCTRL_TMP -echo"
	
	/bin/stty -F /dev/"$SERIAL" "$SPEED" cs"$DBITS" $PARITY_TMP "$SBITS_TMP" $FCTRL_TMP
	
	if [ "$TYPE" = "console" ]; then
		start_service() {
			procd_open_instance
			procd_set_param command /sbin/getty "$SPEED" /dev/"$SERIAL" vt100
			procd_set_param respawn
			procd_close_instance
		}
	elif [ "$TYPE" = "overip" ]; then
		MODE=`uci -q get rs."$SERIAL".mode`

		SBITS=`check_value "$SBITS" "t"`
		DBITS=`check_value "$DBITS" "b"`
		SPEED=`check_value "$SPEED" "s"`
		PARITY=`check_value "$PARITY" "a"`

		if [ "$MODE" = "server" ]; then
			MODE=`check_value "$MODE" "m"`
			TIMEOUT=`uci -q get rs."$SERIAL".timeout`
			TIMEOUT=`check_value "$TIMEOUT" "c"`
			IP_LISTEN=`uci -q get rs."$SERIAL".ip_listen`
			IP_LISTEN=`check_value "$IP_LISTEN" "i"`
			PORT_LISTEN=`uci -q get rs."$SERIAL".port_listen`
			PORT_LISTEN=`check_value "$PORT_LISTEN" "g"`
			PROTOCOL=`uci -q get rs."$SERIAL".protocol`
			ALWAYS_RECONNECT=`uci -q get rs."$SERIAL".always_reconnect`

			DEBUG_LEVEL=`uci -q get rs."$SERIAL".debug`
			DEBUG_LEVEL=`check_value "$DEBUG_LEVEL" "D"`

			start_service() {
				procd_open_instance
				procd_set_param command /usr/sbin/sodog -p "/dev/$SERIAL" $DBITS $SPEED $PARITY $SBITS $MODE $DEBUG_LEVEL $TIMEOUT $IP_LISTEN $PORT_LISTEN
				
				if [ "$PROTOCOL" = "udp" ]; then
					UDP="-f"
					procd_append_param command -f
				fi
				if [ "$ALWAYS_RECONNECT" == "1" ]; then
					procd_append_param command -r
				fi
				procd_set_param respawn ${respawn_threshold:-0} ${respawn_timeout:-6} ${respawn_retry:-0}
				procd_close_instance

			}
		elif [ "$MODE" = "client" ]; then
			MODE=`check_value "$MODE" "m"`
			INTERVAL=`uci -q get rs."$SERIAL".recon_interval`
			INTERVAL=`check_value "$INTERVAL" "y"`
			IP_CONNECT=`uci -q get rs."$SERIAL".ip_connect`
			IP_CONNECT=`check_value "$IP_CONNECT" "l"`
			PORT_CONNECT=`uci -q get rs."$SERIAL".port_connect`
			PORT_CONNECT=`check_value "$PORT_CONNECT" "k"`
			ALWAYS_RECONNECT=`uci -q get rs."$SERIAL".always_reconnect`

			DEBUG_LEVEL=`uci -q get rs."$SERIAL".debug`
			DEBUG_LEVEL=`check_value "$DEBUG_LEVEL" "D"`
			start_service() {
				procd_open_instance
				procd_set_param command /usr/sbin/sodog -p "/dev/$SERIAL" $DBITS $SPEED $PARITY $SBITS $MODE $DEBUG_LEVEL $IP_CONNECT $PORT_CONNECT $INTERVAL

				if [ "$PROTOCOL" = "udp" ]; then
					UDP="-f"
					procd_append_param command -f
				fi
				if [ "$ALWAYS_RECONNECT" == "1" ]; then
					procd_append_param command -r
				fi
				
				procd_set_param respawn ${respawn_threshold:-0} ${respawn_timeout:-6} ${respawn_retry:-0}
				procd_close_instance
			}
		elif [ "$MODE" = "bidirect" ]; then
			MODE=`check_value "$MODE" "m"`
			GPIO=`uci -q get rs."$SERIAL".gpio`
			GPIO=`check_value "$GPIO" "u"`
			GPIOSTATE=`uci -q get rs."$SERIAL".gpiostate`
			GPIOSTATE=`check_value "$GPIOSTATE" "j"`

			TIMEOUT=`uci -q get rs."$SERIAL".timeout`
			TIMEOUT=`check_value "$TIMEOUT" "c"`
			IP_LISTEN=`uci -q get rs."$SERIAL".ip_listen`
			IP_LISTEN=`check_value "$IP_LISTEN" "i"`
			PORT_LISTEN=`uci -q get rs."$SERIAL".port_listen`
			PORT_LISTEN=`check_value "$PORT_LISTEN" "g"`

			INTERVAL=`uci -q get rs."$SERIAL".recon_interval`
			INTERVAL=`check_value "$INTERVAL" "y"`
			IP_CONNECT=`uci -q get rs."$SERIAL".ip_connect`
			IP_CONNECT=`check_value "$IP_CONNECT" "l"`
			PORT_CONNECT=`uci -q get rs."$SERIAL".port_connect`
			PORT_CONNECT=`check_value "$PORT_CONNECT" "k"`

			DEBUG_LEVEL=`uci -q get rs."$SERIAL".debug`
			DEBUG_LEVEL=`check_value "$DEBUG_LEVEL" "D"`

			start_service() {
				procd_open_instance
				procd_set_param command /usr/sbin/sodog -p "/dev/$SERIAL" $DBITS $SPEED $PARITY $SBITS $MODE $DEBUG_LEVEL $IP_CONNECT $PORT_CONNECT $INTERVAL $TIMEOUT $IP_LISTEN $PORT_LISTEN $GPIO $GPIOSTATE
				procd_set_param respawn ${respawn_threshold:-0} ${respawn_timeout:-6} ${respawn_retry:-0}
				procd_close_instance
			}
		fi
	elif [ "$TYPE" = "modem" ]; then
		DCONNECT=`uci -q get rs."$SERIAL".direct_connect`
		PORT=`uci -q get rs."$SERIAL".modem_port`
		SPECIAL_CRLF=`uci -q get rs."$SERIAL".use_alternative_crlf`
		INIT_STRING=`uci -q get rs."$SERIAL".init_string`
		[ -n "$DCONNECT" ] && PARAMS="$PARAMS -D $DCONNECT"
		[ -n "$PORT" ] && PARAMS="$PARAMS -p $PORT"
		[ -n "$INIT_STRING" ] && PARAMS="$PARAMS -i $INIT_STRING"
		[ -n "$SPECIAL_CRLF" ] && [ "$SPECIAL_CRLF" == "1" ] && PARAMS="$PARAMS -x 1"
		start_service() {
			procd_open_instance
			procd_set_param command /usr/bin/tcpser -s "$SPEED" -d "/dev/$SERIAL" $PARAMS
			procd_set_param respawn
			procd_close_instance
		}
	elif [ "$TYPE" = "modbus" ]; then
		MODBUS_IP=`uci -q get rs."$SERIAL".modbus_ip`
		MODBUS_PORT=`uci -q get rs."$SERIAL".modbus_port`
		
		SLAVE_ID=`uci -q get rs."$SERIAL".slave_id`
		SLAVE_ID_CONFIG=`uci -q get rs."$SERIAL".slave_id_config`
		MULTI_SLAVE_ID=`uci -q get rs."$SERIAL".multi_slave_id`
		SINGLE_SLAVE_ID=`uci -q get rs."$SERIAL".single_slave_id`
		
		start_service() {
			echo "$MULTI_SLAVE_ID"
			procd_open_instance
			if [ "$SLAVE_ID_CONFIG" = "single" ]; then
				procd_set_param command /usr/sbin/modbusgwd -p /dev/"$SERIAL" -s "$SPEED" -b "$DBITS" -a "$PARITY" -t "$SBITS" -g "$SINGLE_SLAVE_ID" -i "$MODBUS_IP" -m "$MODBUS_PORT"
			else
				procd_set_param command /usr/sbin/modbusgwd -p /dev/"$SERIAL" -s "$SPEED" -b "$DBITS" -a "$PARITY" -t "$SBITS" -r "$MULTI_SLAVE_ID" -i "$MODBUS_IP" -m "$MODBUS_PORT"
			fi	
			procd_set_param respawn ${respawn_threshold:-0} ${respawn_timeout:-6} ${respawn_retry:-0}
			procd_close_instance
		}
	elif [ "$TYPE" = "ntrip" ]; then
        NTRIP_IP=`uci -q get rs."$SERIAL".ntrip_ip`
        NTRIP_PORT=`uci -q get rs."$SERIAL".ntrip_port`
        NTRIP_MOUNTPT=`uci -q get rs."$SERIAL".ntrip_mount_point`
        NTRIP_DATAF=`uci -q get rs."$SERIAL".ntrip_data_format`
        NTRIP_USER=`uci -q get rs."$SERIAL".ntrip_user`
        NTRIP_PSW=`uci -q get rs."$SERIAL".ntrip_password`
        
        HAVE_GPS=`uci get -q hwinfo.hwinfo.gps`
        USE_GPS=`uci -q get rs."$SERIAL".use_router_gps`
        GPS_FIXTIME=`gpsctl -f`
        NTRIP_USER_NMEA=`uci -q get rs."$SERIAL".user_nmea`
        NTRIP_NMEA=`uci -q get rs."$SERIAL".ntrip_nmea`
        GPS_RETRY_COUNTER=0
        GPS_NMEA_LEN=0

        start_service() {
           if [ "$HAVE_GPS" = "1" ] && [ "$USE_GPS" = "1" ]; then
                #echo "Trying to acquire and use NMEA from the GPS module"
                NTRIP_NMEA="get_from_gps"
           elif [ -n "$NTRIP_USER_NMEA" ]; then
                #echo "Using NMEA preconfigured by the user"
                NTRIP_NMEA="$NTRIP_USER_NMEA"
           fi

            procd_open_instance
				procd_set_param command /usr/bin/ntripclient

				procd_append_param command -s $NTRIP_IP
				procd_append_param command -r $NTRIP_PORT
				procd_append_param command -m $NTRIP_MOUNTPT
				procd_append_param command -M $NTRIP_DATAF
				procd_append_param command -u $NTRIP_USER
				procd_append_param command -p $NTRIP_PSW
				procd_append_param command -D /dev/$SERIAL
				procd_append_param command -B $SPEED
				procd_append_param command -A $DBITS
				procd_append_param command -Y $PARITY
				procd_append_param command -T $SBITS
				
				if [ -n "$NTRIP_NMEA" ]; then
					procd_append_param command -n $NTRIP_NMEA
				fi

				procd_set_param respawn ${respawn_threshold:-0} ${respawn_timeout:-6} ${respawn_retry:-0}
            procd_close_instance
        }
	fi
fi

reload_service(){
	procd_set_param file /etc/config/rs
	stop
	start
}
