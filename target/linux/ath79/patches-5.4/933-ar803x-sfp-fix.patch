diff -u linux-5.4.147/drivers/net/phy/at803x.c linux-5.4.147/drivers/net/phy/at803x.c
--- linux-5.4.147/drivers/net/phy/at803x.c
+++ linux-5.4.147/drivers/net/phy/at803x.c
@@ -14,6 +14,20 @@
 #include <linux/etherdevice.h>
 #include <linux/of_gpio.h>
 #include <linux/gpio/consumer.h>
+#include <linux/sfp.h>
+#include <linux/phylink.h>
+#include <linux/bitfield.h>
+
+#define AT803X_SPECIFIC_FUNCTION_CONTROL	0x10
+#define AT803X_SFC_ASSERT_CRS			BIT(11)
+#define AT803X_SFC_FORCE_LINK			BIT(10)
+#define AT803X_SFC_MDI_CROSSOVER_MODE_M		GENMASK(6, 5)
+#define AT803X_SFC_AUTOMATIC_CROSSOVER		0x3
+#define AT803X_SFC_MANUAL_MDIX			0x1
+#define AT803X_SFC_MANUAL_MDI			0x0
+#define AT803X_SFC_SQE_TEST			BIT(2)
+#define AT803X_SFC_POLARITY_REVERSAL		BIT(1)
+#define AT803X_SFC_DISABLE_JABBER		BIT(0)
 
 #define AT803X_SPECIFIC_STATUS			0x11
 #define AT803X_SS_SPEED_MASK			(3 << 14)
@@ -52,7 +66,21 @@
 #define AT803X_DEBUG_DATA			0x1E
 
 #define AT803X_MODE_CFG_MASK			0x0F
-#define AT803X_MODE_CFG_SGMII			0x01
+#define AT803X_MODE_CFG_BASET_RGMII		0x00
+#define AT803X_MODE_CFG_BASET_SGMII		0x01
+#define AT803X_MODE_CFG_BX1000_RGMII_50		0x02
+#define AT803X_MODE_CFG_BX1000_RGMII_75		0x03
+#define AT803X_MODE_CFG_BX1000_CONV_50		0x04
+#define AT803X_MODE_CFG_BX1000_CONV_75		0x05
+#define AT803X_MODE_CFG_FX100_RGMII_50		0x06
+#define AT803X_MODE_CFG_FX100_CONV_50		0x07
+#define AT803X_MODE_CFG_RGMII_AUTO_MDET		0x0B
+#define AT803X_MODE_CFG_FX100_RGMII_75		0x0E
+#define AT803X_MODE_CFG_FX100_CONV_75		0x0F
+#define AT803X_MODE_FIBER			0x01
+#define AT803X_MODE_COPPER			0x00
+
+
 
 #define AT803X_PSSR			0x11	/*PHY-Specific Status Register*/
 #define AT803X_PSSR_MR_AN_COMPLETE	0x0200
@@ -70,12 +98,17 @@
 #define AT803X_PHY_ID_MASK			0xffffffef
 #define AT8032_PHY_ID_MASK			0xffffffff
 
+#define AT803X_PAGE_FIBER			0
+#define AT803X_PAGE_COPPER			1
+
 MODULE_DESCRIPTION("Atheros 803x PHY driver");
 MODULE_AUTHOR("Matus Ujhelyi");
 MODULE_LICENSE("GPL");
 
 struct at803x_priv {
-	bool phy_reset:1;
+	u8 is_fiber:1;
+	u8 is_1000basex:1;
+	u8 is_copper:1;
 };
 
 struct at803x_context {
@@ -115,6 +148,22 @@
 	return phy_write(phydev, AT803X_DEBUG_DATA, val);
 }
 
+static int at803x_write_page(struct phy_device *phydev, int page)
+{
+	int mask;
+	int set;
+
+	if (page == AT803X_PAGE_COPPER) {
+		set = AT803X_BT_BX_REG_SEL;
+		mask = 0;
+	} else {
+		set = 0;
+		mask = AT803X_BT_BX_REG_SEL;
+	}
+
+	return __phy_modify(phydev, AT803X_REG_CHIP_CONFIG, mask, set);
+}
+
 static int at803x_enable_rx_delay(struct phy_device *phydev)
 {
 	return at803x_debug_reg_mask(phydev, AT803X_DEBUG_REG_0, 0,
@@ -243,10 +292,92 @@
 	return phy_modify(phydev, MII_BMCR, BMCR_PDOWN | BMCR_ISOLATE, 0);
 }
 
+static int at803x_sfp_insert(void *upstream, const struct sfp_eeprom_id *id)
+{
+	__ETHTOOL_DECLARE_LINK_MODE_MASK(at803x_support) = { 0, };
+	__ETHTOOL_DECLARE_LINK_MODE_MASK(support) = { 0, };
+	struct phy_device *phydev = upstream;
+	phy_interface_t iface;
+
+	phylink_set(at803x_support, 1000baseX_Full);
+	/* AT803x only support 1000baseX but SGMII works fine when module runs
+	 * at 1Gbit.
+	 */
+	phylink_set(at803x_support, 1000baseT_Full);
+
+	sfp_parse_support(phydev->sfp_bus, id, support);
+
+	// Limit to interfaces that both sides support
+	linkmode_and(support, support, at803x_support);
+
+	if (linkmode_empty(support))
+		goto unsupported_mode;
+
+	iface = sfp_select_interface(phydev->sfp_bus, support);
+
+	if (iface != PHY_INTERFACE_MODE_SGMII &&
+	    iface != PHY_INTERFACE_MODE_1000BASEX)
+		goto unsupported_mode;
+
+	dev_info(&phydev->mdio.dev, "SFP interface %s", phy_modes(iface));
+
+	return 0;
+
+unsupported_mode:
+	dev_info(&phydev->mdio.dev, "incompatible SFP module inserted;"
+		 "Only SGMII at 1Gbit/1000BASEX are supported!\n");
+	return -EINVAL;
+}
+
+static const struct sfp_upstream_ops at803x_sfp_ops = {
+	.attach = phy_sfp_attach,
+	.detach = phy_sfp_detach,
+	.module_insert = at803x_sfp_insert,
+};
+
+static int at803x_check_mode(struct phy_device *phydev) {
+
+	int mode;
+
+	struct at803x_priv *priv;
+	priv = phydev->priv;
+
+	if (phydev->drv->phy_id == ATH8031_PHY_ID) {
+
+		mode = (phy_read(phydev, AT803X_REG_CHIP_CONFIG)>>4) & AT803X_MODE_CFG_MASK;
+	//	phydev_info(phydev, "%s() call MODE: %02X \n",__func__, mode);
+		mutex_lock(&phydev->mdio.bus->mdio_lock);
+
+		if (mode == AT803X_MODE_CFG_BX1000_RGMII_50 ||
+			mode == AT803X_MODE_CFG_BX1000_RGMII_75) {
+			priv->is_1000basex = true;
+			priv->is_fiber = false;
+			priv->is_copper = false;
+			at803x_write_page(phydev, AT803X_PAGE_FIBER);
+		} else 	
+		if (mode == AT803X_MODE_CFG_FX100_RGMII_50 ||
+			mode == AT803X_MODE_CFG_FX100_RGMII_75) {
+			priv->is_1000basex = false;
+			priv->is_fiber = true;
+			priv->is_copper = false;
+			at803x_write_page(phydev, AT803X_PAGE_FIBER);
+		} else {
+			priv->is_1000basex = false;			
+			priv->is_fiber = false;
+			priv->is_copper = true;
+			at803x_write_page(phydev, AT803X_PAGE_COPPER);
+		}
+		mutex_unlock(&phydev->mdio.bus->mdio_lock);
+	}
+
+	return 0;
+}
+ 
 static int at803x_probe(struct phy_device *phydev)
 {
 	struct device *dev = &phydev->mdio.dev;
 	struct at803x_priv *priv;
+	int ret;
 
 	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
 	if (!priv)
@@ -254,6 +385,14 @@
 
 	phydev->priv = priv;
 
+	ret = at803x_check_mode(phydev);
+	if (ret < 0)
+		return ret;
+
+	ret = phy_sfp_probe(phydev, &at803x_sfp_ops);
+	if (ret < 0)
+		return ret;
+
 	return 0;
 }
 
@@ -265,21 +404,10 @@
 	if (phydev->drv->phy_id == ATH8031_PHY_ID &&
 		phydev->interface == PHY_INTERFACE_MODE_SGMII)
 	{
-		v = phy_read(phydev, AT803X_REG_CHIP_CONFIG);
-		/* select SGMII/fiber page */
-		ret = phy_write(phydev, AT803X_REG_CHIP_CONFIG,
-						v & ~AT803X_BT_BX_REG_SEL);
-		if (ret)
-			return ret;
 		/* enable SGMII autonegotiation */
 		ret = phy_write(phydev, MII_BMCR, AT803X_SGMII_ANEG_EN);
 		if (ret)
 			return ret;
-		/* select copper page */
-		ret = phy_write(phydev, AT803X_REG_CHIP_CONFIG,
-						v | AT803X_BT_BX_REG_SEL);
-		if (ret)
-			return ret;
 	}
 
 	/* The RX and TX delay default is:
@@ -344,6 +472,7 @@
 	 * in the FIFO. In such cases, the FIFO enters an error mode it
 	 * cannot recover from by software.
 	 */
+
 	if (phydev->state == PHY_NOLINK && phydev->mdio.reset_gpio) {
 		struct at803x_context context;
 
@@ -360,47 +489,17 @@
 	}
 }
 
-static int at803x_aneg_done(struct phy_device *phydev)
-{
-	int ccr;
-
-	int aneg_done = genphy_aneg_done(phydev);
-	if (aneg_done != BMSR_ANEGCOMPLETE)
-		return aneg_done;
-
-	/*
-	 * in SGMII mode, if copper side autoneg is successful,
-	 * also check SGMII side autoneg result
-	 */
-	ccr = phy_read(phydev, AT803X_REG_CHIP_CONFIG);
-	if ((ccr & AT803X_MODE_CFG_MASK) != AT803X_MODE_CFG_SGMII)
-		return aneg_done;
-
-	/* switch to SGMII/fiber page */
-	phy_write(phydev, AT803X_REG_CHIP_CONFIG, ccr & ~AT803X_BT_BX_REG_SEL);
-
-	/* check if the SGMII link is OK. */
-	if (!(phy_read(phydev, AT803X_PSSR) & AT803X_PSSR_MR_AN_COMPLETE)) {
-		phydev_warn(phydev, "803x_aneg_done: SGMII link is not ok\n");
-		aneg_done = 0;
-#ifdef CONFIG_OF_MDIO
-		if (phydev->mdio.dev.of_node &&
-				of_property_read_bool(phydev->mdio.dev.of_node,
-				"at803x-override-sgmii-link-check")) {
-			aneg_done = 1;
-		}
-#endif
-	}
-	/* switch back to copper page */
-	phy_write(phydev, AT803X_REG_CHIP_CONFIG, ccr | AT803X_BT_BX_REG_SEL);
-
-	return aneg_done;
-}
-
 static int at803x_read_status(struct phy_device *phydev)
 {
 	int ss, err, old_link = phydev->link;
 
+	int strap_mode = (phy_read(phydev, AT803X_REG_CHIP_CONFIG) & AT803X_MODE_CFG_MASK);
+	if( strap_mode == AT803X_MODE_CFG_RGMII_AUTO_MDET ) {
+		err = at803x_check_mode(phydev);
+		if (err)
+			return err;
+	}
+
 	/* Update the link, but return if there was an error */
 	err = genphy_update_link(phydev);
 	if (err)
@@ -428,6 +527,12 @@
 		return ss;
 
 	if (ss & AT803X_SS_SPEED_DUPLEX_RESOLVED) {
+		int sfc;
+
+		sfc = phy_read(phydev, AT803X_SPECIFIC_FUNCTION_CONTROL);
+		if (sfc < 0)
+			return sfc;
+
 		switch (ss & AT803X_SS_SPEED_MASK) {
 		case AT803X_SS_SPEED_10:
 			phydev->speed = SPEED_10;
@@ -447,6 +552,18 @@
 			phydev->mdix = ETH_TP_MDI_X;
 		else
 			phydev->mdix = ETH_TP_MDI;
+		
+		switch (FIELD_GET(AT803X_SFC_MDI_CROSSOVER_MODE_M, sfc)) {
+		case AT803X_SFC_MANUAL_MDI:
+			phydev->mdix_ctrl = ETH_TP_MDI;
+			break;
+		case AT803X_SFC_MANUAL_MDIX:
+			phydev->mdix_ctrl = ETH_TP_MDI_X;
+			break;
+		case AT803X_SFC_AUTOMATIC_CROSSOVER:
+			phydev->mdix_ctrl = ETH_TP_MDI_AUTO;
+			break;
+		}
 	}
 
 	if (phydev->autoneg == AUTONEG_ENABLE && phydev->autoneg_complete)
@@ -459,7 +576,7 @@
 {
 	/* ATHEROS 8035 */
 	.phy_id			= ATH8035_PHY_ID,
-	.name			= "Atheros 8035 ethernet",
+	.name			= "AR8035",
 	.phy_id_mask		= AT803X_PHY_ID_MASK,
 	.probe			= at803x_probe,
 	.config_init		= at803x_config_init,
@@ -474,7 +591,7 @@
 }, {
 	/* ATHEROS 8030 */
 	.phy_id			= ATH8030_PHY_ID,
-	.name			= "Atheros 8030 ethernet",
+	.name			= "AR8030",
 	.phy_id_mask		= AT803X_PHY_ID_MASK,
 	.probe			= at803x_probe,
 	.config_init		= at803x_config_init,
@@ -489,7 +606,7 @@
 }, {
 	/* ATHEROS 8031 */
 	.phy_id			= ATH8031_PHY_ID,
-	.name			= "Atheros 8031 ethernet",
+	.name			= "AR8031/33",
 	.phy_id_mask		= AT803X_PHY_ID_MASK,
 	.probe			= at803x_probe,
 	.config_init		= at803x_config_init,
@@ -499,13 +616,12 @@
 	.resume			= at803x_resume,
 	.features		= PHY_GBIT_FEATURES,
 	.read_status		= at803x_read_status,
-	.aneg_done		= at803x_aneg_done,
 	.ack_interrupt		= &at803x_ack_interrupt,
 	.config_intr		= &at803x_config_intr,
 }, {
 	/* ATHEROS 8032 */
 	.phy_id			= ATH8032_PHY_ID,
-	.name			= "Atheros 8032 ethernet",
+	.name			= "AR8032",
 	.phy_id_mask		= AT8032_PHY_ID_MASK,
 	.probe			= at803x_probe,
 	.config_init		= at803x_config_init,
