<%
	require "luci.fs"
	require "luci.tools.status"
	eventlog = require'tlt_eventslog_lua'
	require "teltonika_lua_functions"
	luci.util   = require "luci.util"
	local ntm = require "luci.model.network"
	require("uci")
	local uci = uci.cursor()
	local sys = require "luci.sys"

	local lan_ip = luci.util.trim(luci.sys.exec("uci -q get network.lan.ipaddr")) or ""
	local lan_mask = luci.util.trim(luci.sys.exec("uci -q get network.lan.netmask")) or "255.255.255.0"
	local wan_ip
	local number
	local time
	local action
	local result
	local index = 0
	local line
	local event
	local Table = {}
	local wan_ip_addresses = {}
	local ds = require "luci.dispatcher"
	local translatef = luci.i18n.translatef

	---------------------GET WAN--------------------------
	-- Checks all possible wan interfaces and finds the first one with a set IP address
	wan_ip_addresses[1] = luci.util.trim(luci.sys.exec("gsmctl -p `uci -q get network.wan.ifname`")) or ""
	wan_ip_addresses[2] = luci.util.trim(luci.sys.exec("gsmctl -p `uci -q get network.wan2.ifname`")) or ""
	wan_ip_addresses[3] = luci.util.trim(luci.sys.exec("gsmctl -p `uci -q get network.wan3.ifname`")) or ""
	wan_ip = wan_ip_addresses[1]
	if wan_ip == "" then
		wan_ip = wan_ip_addresses[2]
		if wan_ip == "" then
			wan_ip = wan_ip_addresses[3]
		end
	end
	--------------------------------------------
	--------------Access control----------------
	uci:foreach("dropbear", "dropbear", function(s)
		ssh = s.enable or 0
		if ssh == "1" then
			ssh = tostring(translate("Enabled"))
		else
			ssh = tostring(translate("Disabled"))
		end
		ssh_port = s.Port or "N/A"

	end)

	uci:foreach("firewall", "rule", function(s)
		if s.name == "Enable_HTTP_WAN" then
			wan_http = s.enabled or tostring(translate("Enabled"))
			if wan_http ~= translate("Enabled") then
				wan_http = tostring(translate("Disabled"))
			end
			http_port = s.dest_port or "N/A"
		end

		if s.name == "Enable_HTTPS_WAN" then
			wan_https = s.enabled or tostring(translate("Enabled"))
			if wan_https ~= translate("Enabled") then
				wan_https = tostring(translate("Disabled"))
			end
			https_port = s.dest_port or "N/A"
		end

		if s.name == "Enable_SSH_WAN" then
			wan_ssh = s.enabled or tostring(translate("Enabled"))
			if wan_ssh ~= translate("Enabled")  then
				wan_ssh = tostring(translate("Disabled"))
			end
			wan_ssh_port = s.dest_port or "N/A"
		end
	end)
	local http = uci:get("uhttpd", "main", "enablehttp") or "Disabled"
	if http ~= "Disabled" then
		http = tostring(translate("Enabled"))
	else
		http = tostring(translate("Disabled"))
	end

	function eventspit(event)
		event = tostring(event)
		local myTable = event:split("\n")
			for i=1, #myTable -1 do
				line = myTable[i]:split("|")
				Table[i] = {}
				for j=1, #line do
					Table[i][j] = line[j]
				end
			end
		return Table
	end

function TableConcat(t1,t2)
	for i=1,#t2 do
		t1[#t1+1] = t2[i]
	end
	return t1
end
	------------------------------------
	----------Last connection-----------
	----LAN----
	t = {requests = "print", table = "events", date = "1", query=" WHERE NAME = 'SSH' and TEXT like '%LAN%'" , order="ID DESC", limit="3"}
	table = eventlog:print(t)
	t = {requests = "print", table = "events", date = "1", query=" WHERE NAME = 'Web UI' and TEXT like '%HTTP LAN%'" , order="ID DESC", limit="3"}
	tmp_table = eventlog:print(t)
	table = TableConcat(table, tmp_table);
	t = {requests = "print", table = "events", date = "1", query=" WHERE NAME = 'Web UI' and TEXT like '%HTTPS LAN%'" , order="ID DESC", limit="3"}
	tmp_table = eventlog:print(t)
	table = TableConcat(table, tmp_table);

	t = {requests = "print", table = "events", date = "1", query=" WHERE NAME = 'SSH' and TEXT like '%WAN%'" , order="ID DESC", limit="3"}
	tmp_table = eventlog:print(t)
	table = TableConcat(table, tmp_table);
	t = {requests = "print", table = "events", date = "1", query=" WHERE NAME = 'Web UI' and TEXT like '%HTTP WAN%'" , order="ID DESC", limit="3"}
	tmp_table = eventlog:print(t)
	table = TableConcat(table, tmp_table);
	t = {requests = "print", table = "events", date = "1", query=" WHERE NAME = 'Web UI' and TEXT like '%HTTPS WAN%'" , order="ID DESC", limit="3"}
	tmp_table = eventlog:print(t)
	table = TableConcat(table, tmp_table);

	Table = table
	local local_connections = {}
	local add_item
	local text_ip = {}
	local connection_status = ""
	local con_type
	local via

	for i = #Table, 1, -1 do
		number = Table[i][1]
		time = Table[i][2]
		action = Table[i][3]
		result = Table[i][4]
		con_type = "LAN"

		text_ip["IP"] = result:match("(%d+.%d+.%d+.%d+)")
		if string.match(result, "Password auth succeeded") or string.match(result, "Authentication was succesful") or string.match(result, "Authentication was successful") then
			connection_status = translate("Succeeded")
		else
			connection_status = translate("Failed")
		end

		if string.match(result, "WAN") then
			con_type = "WAN"
		end

		if action == "SSH" then
			via = "SSH"
		else
			if string.match(result, "HTTPS") then
				via = "HTTPS"
			else
				via = "HTTP"
			end
		end

		add_item = con_type .. " | " .. via .. " | " .. time .. " | " .. text_ip['IP'] .. " | " .. connection_status
		index = index + 1

		local_connections[index] = add_item


	end
	if index == 0 then
		index = 0
	end

	if luci.http.formvalue("status") == "1" then
		local rv = {
			iwinfo = ntm:iwinfo_parser(),
			lan_ip = lan_ip,
			------Access controll-------
			ssh = ssh,
			ssh_port = ssh_port,
			http_port = http_port,
			https_port = https_port,
			http = http,
			https = tostring(translate("Enabled")),
			wan_http = wan_http,
			wan_https = wan_https,
			local_connections = local_connections,
			wan_ssh = wan_ssh,
			ip = wan_ip,
			wan_ips = wan_ip_addresses
		}
		luci.http.prepare_content("application/json")
		luci.http.write_json(rv)
		return
	end
-%>

<%+header%>
<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/javascript">//<![CDATA[

function refreshPage(){
	document.getElementById("refresh").disabled = true;
	tab_switch("access");
	XHR.get('<%=luci.dispatcher.build_url("admin", "status", "netinfo", "access")%>', { status: 1 },
		function(x, info)
		{
			/* LAST REMOTE CONNECTIONS */
			var dns_cache = { };
			XHR.get('<%=build_url("/admin/status/realtime/connections_status")%>', null,
				function(x, json)
				{
					var conn = json.connections;
					var lookup_queue = [ ];
					var arry_ssh_connection = [ ];
					var arry_http_connection = [ ];
					var arry_https_connection = [ ];
					var arry_ssh_wan_connection = [ ];
					var arry_http_wan_connection = [ ];
					var arry_https_wan_connection = [ ];

					var https_lan_b = 0;
					var http_lan_b = 0;
					var ssh_lan_b = 0;
					var https_wan_b = 0;
					var http_wan_b = 0;
					var ssh_wan_b = 0;

					conn.sort(function(a, b) {
						return b.bytes - a.bytes;
					});
					var arr_type = ['SSH', 'HTTP', 'HTTPS'];
					var arr_status = [info.ssh, info.http, info.https];
					var arr_port = [info.ssh_port, info.http_port, info.https_port];
					var arr_wan_status = [info.wan_ssh, info.wan_http, info.wan_https];
					var local_connections = info.local_connections;
					var split_ssh = "";
					for (var i = 0; i < conn.length; i++)
					{
						var c  = conn[i];
						if (!dns_cache[c.src])
							lookup_queue.push(c.src);


						if (!dns_cache[c.dst])
							lookup_queue.push(c.dst);

						var src = dns_cache[c.src] || (c.layer3 == 'ipv6' ? '[' + c.src + ']' : c.src);
						var dst = dns_cache[c.dst] || (c.layer3 == 'ipv6' ? '[' + c.dst + ']' : c.dst);
						var full_src

						var kb = String.format('%1024.2mB ', c.bytes);
						var parse_bytes = parseInt(c.bytes);
						full_src = String.format('%s:%d %s:%d', src, c.sport, dst, c.dport);
						if (c.dport !== undefined && c.dport == arr_port[0]){
							if (dst == info.lan_ip){
								//-----SSH LAN------
								arry_ssh_connection.push(full_src);
								ssh_lan_b += parse_bytes;
							}else if (dst == info.ip || dst == info.wan_ips[0] || dst == info.wan_ips[1] || dst == info.wan_ips[2]){
								//-----SSH REMOTE------
								arry_ssh_wan_connection.push(full_src);
								ssh_wan_b += parse_bytes;
							}
						}
						if (c.dport !== undefined && c.dport == arr_port[1]){
							if (dst == info.lan_ip){
								//-----HTTP LAN------
								arry_http_connection.push(full_src);
								http_lan_b += parse_bytes;
							}else if (dst == info.ip || dst == info.wan_ips[0] || dst == info.wan_ips[1] || dst == info.wan_ips[2]){
								//-----HTTP REMOTE------
								arry_http_wan_connection.push(full_src);
								http_wan_b += parse_bytes;
							}
						}
						if (c.dport !== undefined && c.dport == arr_port[2]){
							if (dst == info.lan_ip){
								//-----HTTPS LAN------
								arry_https_connection.push(full_src);
								https_lan_b += parse_bytes;
							}else if (dst == info.ip || dst == info.wan_ips[0] || dst == info.wan_ips[1] || dst == info.wan_ips[2]){
								//-----HTTP REMOTE------
								arry_https_wan_connection.push(full_src);
								https_wan_b += parse_bytes;
							}
						}
					}
					//-------ACCESS STATUS LAN-------------

					var https_format_bytes = String.format('%1024.2mB ', https_lan_b);
					var http_format_bytes = String.format('%1024.2mB ', http_lan_b);
					var ssh_format_bytes = String.format('%1024.2mB ', ssh_lan_b);

					var total_active = [ ];
					total_active = [arry_ssh_connection.length + " ( " + ssh_format_bytes + ")", arry_http_connection.length  + " ( " + http_format_bytes + ")", arry_https_connection.length + " ( " + https_format_bytes + ")"];
					var wi = document.getElementById('access_status');
					if (wi){
						while( wi.rows.length > 1 )
							wi.rows[0].parentNode.deleteRow(1);
						var iwinfo = info.iwinfo;
						for (var i = 0; i < 3; i++){
							var tr = wi.rows[0].parentNode.insertRow(-1);
								tr.className = 'cbi-section-table-row cbi-rowstyle-' + (1 + (i % 2));
							tr.insertCell(-1).innerHTML = arr_type[i];
							tr.insertCell(-1).innerHTML = arr_status[i];
							tr.insertCell(-1).innerHTML = arr_port[i];
							tr.insertCell(-1).innerHTML = total_active[i];

						}
					}
					//-------ACCESS STATUS REMOTE-------------
					var r_https_format_bytes = String.format('%1024.2mB ', https_wan_b);
					var r_http_format_bytes = String.format('%1024.2mB ', http_wan_b);
					var r_ssh_format_bytes = String.format('%1024.2mB ', ssh_wan_b);

					var total_rem_active = [ ];
					total_rem_active = [arry_ssh_wan_connection.length + " ( " + r_ssh_format_bytes + ")", arry_http_wan_connection.length  + " ( " + r_http_format_bytes + ")", arry_https_wan_connection.length + " ( " + r_https_format_bytes + ")"];

					var wi = document.getElementById('access_status_remote');
					if (wi) {
						while( wi.rows.length > 1 )
							wi.rows[0].parentNode.deleteRow(1);
						var iwinfo = info.iwinfo;
						for (var i = 0; i < 3; i++) {
							var tr = wi.rows[0].parentNode.insertRow(-1);
								tr.className = 'cbi-section-table-row cbi-rowstyle-' + (1 + (i % 2));
							tr.insertCell(-1).innerHTML = arr_type[i];
							tr.insertCell(-1).innerHTML = arr_wan_status[i];
							tr.insertCell(-1).innerHTML = arr_port[i];
							tr.insertCell(-1).innerHTML = total_rem_active[i];

						}
					}
					//-------LAST CONNECTIONS-------------
					function formated_text(table, arr_type){
						var type = arr_type;
						var ip = "";
						var status = "";
						var text_split = "";
						var joined_text = "";
						var date = "";
						second_time = 0;
						for (var j = 0; j < local_connections.length; j++) {
							text_split = local_connections[j].split(" | ");
							if (text_split[0] == table){
								if (text_split[1] == arr_type){
									date += text_split[2] + "<br>";
									if (second_time >= 2){
										type = text_split[1];
									}else{
										type = text_split[1];
									}
									second_time += 1;
									ip += text_split[3] + "<br>";
									status += text_split[4] + "<br>"
								}
							}
						}
						if (date == ""){
							date = "<em><%=translate("There are no records yet.")%></em>";
						}
						return {
							type: type,
							date: date,
							ip: ip,
							status: status
						};
					}
					var date = "";
					var wi = document.getElementById('last_connections');
					if (wi){
						while( wi.rows.length > 1 )
							wi.rows[0].parentNode.deleteRow(1);
						var iwinfo = info.iwinfo;

						for (var i = 0; i < 3; i++){
							var tr = wi.rows[0].parentNode.insertRow(-1);
								tr.className = 'cbi-section-table-row cbi-rowstyle-' + (1 + (i % 2));
							var text = formated_text("LAN", arr_type[i]);
							tr.insertCell(-1).innerHTML = text.type;
							tr.insertCell(-1).innerHTML = text.date;
							tr.insertCell(-1).innerHTML = text.ip;
							tr.insertCell(-1).innerHTML = text.status;

						}
					}
					//-------LAST REMOTE CONNECTIONS-------------
					var wi = document.getElementById('last_remote_connection');
					if (wi){
						while( wi.rows.length > 1 )
							wi.rows[0].parentNode.deleteRow(1);
						var iwinfo = info.iwinfo;

						for (var i = 0; i < 3; i++){
							var tr = wi.rows[0].parentNode.insertRow(-1);
								tr.className = 'cbi-section-table-row cbi-rowstyle-' + (1 + (i % 2));
							var text = formated_text("WAN", arr_type[i]);
							tr.insertCell(-1).innerHTML = text.type;
							tr.insertCell(-1).innerHTML = text.date;
							tr.insertCell(-1).innerHTML = text.ip;
							tr.insertCell(-1).innerHTML = text.status;

						}
					}
				}
			);
			/* LAST REMOTE CONNECTIONS END */
			document.getElementById('refresh').disabled = false;
		}
	);
}

function tab_switch(field){
	if (field == "connections"){
		document.getElementById('access').style.display='none';
		document.getElementById('connections').style.display='block';
		document.getElementById("acces_tab").className = " cbi-tab-disabled ";
		document.getElementById("connections_tab").className = " cbi-tab | active ";
	}else if (field == "access"){
		document.getElementById('connections').style.display='none';
		document.getElementById('access').style.display='block';
		document.getElementById("acces_tab").className = " cbi-tab | active ";
		document.getElementById("connections_tab").className = " cbi-tab-disabled ";
	}
}

AddWindowOnLoadEvent(refreshPage);
//]]></script>

<h2><a id="content" name="content"><%=translate("Access Status")%></a></h2>

<ul class="cbi-tabmenu">
	<li id="acces_tab" class=" cbi-tab | active ">
		<a onclick="tab_switch('access');"><%=translate("Access Information")%></a>
	</li>
	<li id="connections_tab" class=" cbi-tab-disabled ">
		<a onclick="tab_switch('connections');"><%=translate("Last Connections")%></a>

	</li>
</ul>
<fieldset id="access">
	<fieldset class="cbi-section">
		<div class="overlayParent">
			<div class="overlayLegend"><%=translate("Local Access")%></div>
		</div>
		<div>
			<table class="cbi-section-table" id="access_status">
				<tr class="cbi-section-table-titles">
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Type')%>')" onmouseout="HideHint(this)" ><%=translate("Type")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Status')%>')" onmouseout="HideHint(this)" ><%=translate("Status")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Port')%>')" onmouseout="HideHint(this)" ><%=translate("Port")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Currently active other type (ICMP, etc...) connections count')%>')" onmouseout="HideHint(this)" ><%=translate("Active connections")%></th>
				</tr>
				<tr class="cbi-section-table-row">
					<td colspan="5"><em><br /><%=translate("Collecting data...")%></em></td>
				</tr>
			</table>
		</div>
	</fieldset>

	<fieldset class="cbi-section">
		<div class="overlayParent">
			<div class="overlayLegend"><%=translate("Remote Access")%></div>
		</div>
		<div>
			<table class="cbi-section-table" id="access_status_remote">
				<tr class="cbi-section-table-titles">
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Type')%>')" onmouseout="HideHint(this)" ><%=translate("Type")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Status')%>')" onmouseout="HideHint(this)" ><%=translate("Status")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Port')%>')" onmouseout="HideHint(this)" ><%=translate("Port")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Currently active other type (ICMP, etc...) connections count')%>')" onmouseout="HideHint(this)" ><%=translate("Active connections")%></th>
				</tr>
				<tr class="cbi-section-table-row">
					<td colspan="5"><em><br /><%=translate("Collecting data...")%></em></td>
				</tr>
			</table>
		</div>
	</fieldset>
</fieldset>

<fieldset id="connections">
	<fieldset class="cbi-section">
		<div class="overlayParent">
			<div class="overlayLegend"><%=translate("Last Local Connections")%></div>
		</div>
		<div>
			<table class="cbi-section-table" id="last_connections">
				<tr class="cbi-section-table-titles">
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Type')%>')" onmouseout="HideHint(this)" ><%=translate("Type")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Date')%>')" onmouseout="HideHint(this)" ><%=translate("Date")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('IP')%>')" onmouseout="HideHint(this)" ><%=translate("IP")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Authentications status')%>')" onmouseout="HideHint(this)" ><%=translate("Authentications Status")%></th>
				</tr>
				<tr class="cbi-section-table-row">
					<td colspan="5"><em><br /><%=translate("Collecting data...")%></em></td>
				</tr>
			</table>
		</div>
	</fieldset>

	<fieldset class="cbi-section">
		<div class="overlayParent">
			<div class="overlayLegend"><%=translate("Last Remote Connections")%></div>
		</div>
		<div>
			<table class="cbi-section-table" id="last_remote_connection">
				<tr class="cbi-section-table-titles">
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Type')%>')" onmouseout="HideHint(this)" ><%=translate("Type")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Date')%>')" onmouseout="HideHint(this)" ><%=translate("Date")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('IP')%>')" onmouseout="HideHint(this)" ><%=translate("IP")%></th>
					<th class="cbi-section-table-cell" onmouseover="ShowHint(this, '<%=translate('Authentications status')%>')" onmouseout="HideHint(this)" ><%=translate("Authentications Status")%></th>
				</tr>
				<tr class="cbi-section-table-row">
					<td colspan="5"><em><br /><%=translate("Collecting data...")%></em></td>
				</tr>
			</table>
		</div>
	</fieldset>
</fieldset>
<fieldset class="cbi-section">
    <button id="refresh" class="cbi-button-refresh"  style="float: right;" disabled onClick="refreshPage()"><%=translate("Refresh")%></button>
</fieldset>
<%+footer%>
