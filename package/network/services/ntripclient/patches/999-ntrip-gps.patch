*** ntripclient-1.5.0/ntripclient.c	2019-03-28 09:06:32.000000000 +0200
--- ntripclient-1.5.0/ntripclient.c	2019-06-07 13:26:44.093489198 +0300
***************
*** 26,31 ****
--- 26,33 ----
  #include <errno.h>
  #include <string.h>
  #include <time.h>
+ #include <sys/wait.h>
+ #include <sys/time.h>
  
  #include "serial.c"
  
***************
*** 93,98 ****
--- 95,102 ----
    const char *serlogfile;
  };
  
+ void get_nmea_from_gps_device(struct Args* args);
+ 
  /* option parsing */
  #ifdef NO_LONG_OPTS
  #define LONG_OPT(a)
***************
*** 512,520 ****
--- 516,580 ----
      , revisionstr, datestr, argv[0], argv[0]);
      exit(1);
    }
+   
+   /*IF nmea string == "get_from_gps", we should get initial nmea string,
+   from the GPS device*/
+ 
+   if(args->nmea && strstr(args->nmea, "get_from_gps")){
+ 	get_nmea_from_gps_device(args);
+ 	//args->nmea = "$GPGGA,123519,5925.150,N,02443.300,E,1,08,0.9,0.0,M,0.0,M,,*73";
+   }
+   
+   if (args->nmea)
+ 	printf("args->nmea:%s\n", args->nmea);
+   
    return res;
  }
  
+ void get_nmea_from_gps_device(struct Args* args){
+ 	printf("Ntrip getting NMEA from GPS device\n");
+ 	FILE* gps_device;
+ 	char buff[128];
+ 	unsigned int i, j, got_nmea = 0;
+ 	memset(buff, 0, sizeof(buff));
+ 	gps_device = fopen("/dev/gps", "r");
+ 	
+ 	if (gps_device && buff){
+ 		while(1){
+ 			printf("Ntrip reading /dev/gps\n");
+ 			for(i=0;i<10;i++){
+ 				fgets(buff, sizeof(buff), gps_device);
+ 				if(strstr(buff,"GPGGA") != NULL && strlen(buff) > 30){
+ 					//remove newline
+ 					for(j=0;j<sizeof(buff);j++){
+ 						if (buff[j] == '\n' || buff[j] == '\r'){
+ 							buff[j] = '\0';
+ 							break;
+ 						}
+ 					}
+ 					got_nmea = 1;
+ 					break;
+ 				}
+ 			}
+ 			
+ 			if (got_nmea){
+ 				args->nmea = malloc(sizeof(buff));
+ 				if(args->nmea){
+ 					memset(args->nmea, 0, sizeof(buff));
+ 					strncpy(args->nmea, buff, sizeof(buff));
+ 				}
+ 				printf("NMEA used (from GPS): [%s]\n", args->nmea);
+ 				break;
+ 			}
+ 			sleep(5);
+ 		}
+ 		fclose(gps_device);
+ 	}else{
+ 		printf("Ntrip NMEA initial string not used\n");
+ 		args->nmea = NULL;
+ 	}
+ }
+ 
  static const char encodingTable [64] = {
    'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',
    'Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f',
***************
*** 1477,1486 ****
                int lastout = starttime;
                int totalbytes = 0;
                int chunksize = 0;
  
!               while(!stop && !error &&
!               (numbytes=recv(sockfd, buf, MAXDATASIZE-1, 0)) > 0)
                {
  #ifndef WINDOWSVERSION
                  alarm(ALARMTIME);
  #endif
--- 1537,1566 ----
                int lastout = starttime;
                int totalbytes = 0;
                int chunksize = 0;
+               int nmea_retry_count = 0;
+               
+               struct timeval tv;
+               tv.tv_sec = 5;
+               tv.tv_usec = 0;
+               setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (const char*)&tv, sizeof tv);
  
!               while(!stop && !error)
                {
+                 numbytes=recv(sockfd, buf, MAXDATASIZE-1, 0);
+                 
+ /*some servers needs the NMEA string sent to them again a bit later*/
+                 if(numbytes <= 0 && args.nmea != NULL){
+                   send(sockfd, args.nmea, 128, 0);
+                   nmea_retry_count++;
+                   if(nmea_retry_count > 3){
+                      break;
+                   }
+                   continue;
+                 }else if (numbytes <= 0 && args.nmea == NULL){
+                     break;
+                 }
+ /*some servers needs the NMEA string sent to them again a bit later*/
+ 
  #ifndef WINDOWSVERSION
                  alarm(ALARMTIME);
  #endif
