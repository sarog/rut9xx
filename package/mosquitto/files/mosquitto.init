#!/bin/sh /etc/rc.common

APP=/usr/sbin/mosquitto
CONFIG=/etc/mosquitto.conf
START=99
STOP=99

setup_config() {
	config_load mosquitto

	config_get enabled "mqtt" enabled "0"

	if [ "$enabled" == "1" ]; then

		config_get port "mqtt" local_port
		config_get acl_file_path "mqtt" acl_file_path
		config_get password_file "mqtt" password_file

		config_get use_tls_ssl "mqtt" use_tls_ssl
		config_get use_remote_tls "mqtt" use_remote_tls

		config_get use_bridge_login "mqtt" use_bridge_login
		config_get remote_username "mqtt" remote_username
		config_get remote_password "mqtt" remote_password
		config_get remote_clientid "mqtt" remote_clientid

		config_get client_enabled "mqtt" client_enabled
		config_get connection_name "mqtt" connection_name
		config_get remote_addr "mqtt" remote_addr
		config_get remote_port "mqtt" remote_port

		config_get ca_file "mqtt" ca_file
		config_get cert_file "mqtt" cert_file
		config_get key_file "mqtt" key_file
		config_get tls_version "mqtt" tls_version

		config_get bridge_ca_file "mqtt" bridge_cafile
		config_get bridge_cert_file "mqtt" bridge_certfile
		config_get bridge_key_file "mqtt" bridge_keyfile
		config_get bridge_tls_version "mqtt" bridge_tls_version
		config_get bridge_insecure "mqtt" bridge_insecure

		config_get try_private "mqtt" try_private
		config_get cleansession "mqtt" cleansession
		config_get persistence "mqtt" persistence
		config_get anonymous_access "mqtt" anonymous_access

	fi

}

set_topic() {
	local topic direction qos

	config_get topic $1 topic '""'
	config_get direction $1 direction '""'
	config_get qos $1 qos '""'

	echo "topic $topic $direction $qos" >> $CONFIG
}

find_topics() {
	export found_topics=1
}

fill_mosquitto_config() {

	echo "user root" > $CONFIG
	echo "port $port" >> $CONFIG

	# Use access control list
	if [ -n "$acl_file_path" ]; then
		echo "acl_file $acl_file_path" >> $CONFIG
	fi

	# Use TLS/SSL for connection
	if [ "$use_tls_ssl" == "1" ]; then
		echo "cafile $ca_file" >> $CONFIG
		echo "certfile $cert_file" >> $CONFIG
		echo "keyfile $key_file" >> $CONFIG

		if [ "$tls_version" != "all" ]; then
			echo "tls_version $tls_version" >> $CONFIG
		fi
	fi

	if [ "$persistence" == "1" ]; then
		echo "persistence true" >> $CONFIG
	fi

	if [ -n "$password_file" ]; then
		echo "password_file $password_file" >> $CONFIG
	fi

	if [ "$anonymous_access" == "1" ]; then
		echo "allow_anonymous true" >> $CONFIG
	else
		echo "allow_anonymous false" >> $CONFIG
	fi

	config_foreach find_topics "topic"
	[ -z $found_topics ] && return 0
	echo "Client enabled: $client_enabled"
	# Connect to other broker if client is enabled
	if [ "$client_enabled" == "1" ]; then

		echo "connection $connection_name" >> $CONFIG
		echo "address $remote_addr:$remote_port" >> $CONFIG
		echo "notifications false" >> $CONFIG

		# Use TLS/SSL for bridge connection
		if [ "$use_remote_tls" == "1" ]; then
			echo "bridge_cafile $bridge_ca_file" >> $CONFIG
			echo "bridge_certfile $bridge_cert_file" >> $CONFIG
			echo "bridge_keyfile $bridge_key_file" >> $CONFIG
			echo "bridge_tls_version $bridge_tls_version" >> $CONFIG
			if [ "$bridge_insecure" = "1" ]
			then
				echo "bridge_insecure true" >> $CONFIG
			fi
		fi

		# Use remote login
		if [ "$use_bridge_login" == "1" ]; then
			echo "clientid $remote_clientid" >> $CONFIG
			echo "username $remote_username" >> $CONFIG
			echo "password $remote_password" >> $CONFIG
		fi

		# Set topic (-s)
		#echo $topic | sed -e 's/[ \t]*;[ \t]*/\n/g' | sed -e '/^[^ \t]/s/^/topic /g' >> $CONFIG
		config_foreach set_topic "topic"
		# Set other options
		if [ "$try_private" != "1" ]; then
			echo "try_private false" >> $CONFIG
		fi

		if [ "$cleansession" == "1" ]; then
			echo "cleansession true" >> $CONFIG
		fi
	fi
}

start() {
	setup_config
	
	if [ "$enabled" == "1" ]; then
		fill_mosquitto_config
		service_start $APP -d -c $CONFIG
	fi
	
}

stop() {
	service_stop $APP
}

