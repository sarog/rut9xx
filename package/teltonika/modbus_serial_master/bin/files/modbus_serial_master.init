#!/bin/sh /etc/rc.common

USE_PROCD=1
START=98
STOP=99

start_service() {
	RS232_ENABLED=$(uci -q get modbus_serial_master.rs232.enabled)
	RS232_BAUDRATE=$(uci -q get modbus_serial_master.rs232.baudrate)
	RS232_DATABITS=$(uci -q get modbus_serial_master.rs232.databits)
	RS232_PARITY=$(uci -q get modbus_serial_master.rs232.parity)
	RS232_STOPBITS=$(uci -q get modbus_serial_master.rs232.stopbits)
	RS232_FLOWCTRL=$(uci -q get modbus_serial_master.rs232.flowctrl)

	RS485_ENABLED=$(uci -q get modbus_serial_master.rs485.enabled)
	RS485_BAUDRATE=$(uci -q get modbus_serial_master.rs485.baudrate)
	RS485_PARITY=$(uci -q get modbus_serial_master.rs485.parity)
	RS485_FLOWCTRL=$(uci -q get modbus_serial_master.rs485.flowctrl)

	if [ -n "$RS232_ENABLED" ] && [ "$RS232_ENABLED" -eq 1 ]
	then
		case "$RS232_BAUDRATE" in
			"300") RS232_BAUDRATE=300;;
			"1200") RS232_BAUDRATE=1200;;
			"2400") RS232_BAUDRATE=2400;;
			"4800") RS232_BAUDRATE=4800;;
			"9600") RS232_BAUDRATE=9600;;
			"19200") RS232_BAUDRATE=19200;;
			"38400") RS232_BAUDRATE=38400;;
			"57600") RS232_BAUDRATE=57600;;
			"115200") RS232_BAUDRATE=115200;;
			*) RS232_BAUDRATE=19200;;
		esac

		case "$RS232_DATABITS" in
			"5") RS232_DATABITS=cs5;;
			"6") RS232_DATABITS=cs6;;
			"7") RS232_DATABITS=cs7;;
			"8") RS232_DATABITS=cs8;;
			*) RS232_DATABITS=cs8;;
		esac

		case "$RS232_PARITY" in
			"none") RS232_PARITY="-parenb -parodd";;
			"even") RS232_PARITY="parenb -parodd";;
			"odd") RS232_PARITY="parenb parodd";;
			*) RS232_PARITY="parenb -parodd";;
		esac

		case "$RS232_STOPBITS" in
			"1") RS232_STOPBITS="-cstopb";;
			"2") RS232_STOPBITS="cstopb";;
			*) RS232_STOPBITS="-cstopb";;
		esac

		case "$RS232_FLOWCTRL" in
			"none") RS232_FLOWCTRL="-crtscts -ixon -ixoff -echo";;
			"RTSCTS") RS232_FLOWCTRL="crtscts -ixon -ixoff -echo";;
			"XonXoff") RS232_FLOWCTRL="-crtscts ixon ixoff -echo";;
			*) RS232_FLOWCTRL="-crtscts -ixon -ixoff -echo";;
		esac

		/bin/stty -F /dev/rs232 $RS232_BAUDRATE $RS232_DATABITS $RS232_PARITY $RS232_STOPBITS $RS232_FLOWCTRL raw

		procd_open_instance
		procd_set_param command modbus_serial_master --rs232 $RS232_BAUDRATE
		procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-60} ${respawn_retry:-0}
		procd_close_instance
	fi

	if [ -n "$RS485_ENABLED" ] && [ "$RS485_ENABLED" -eq 1 ]
	then
		case "$RS485_BAUDRATE" in
			"300") RS485_BAUDRATE=300;;
			"1200") RS485_BAUDRATE=1200;;
			"2400") RS485_BAUDRATE=2400;;
			"4800") RS485_BAUDRATE=4800;;
			"9600") RS485_BAUDRATE=9600;;
			"19200") RS485_BAUDRATE=19200;;
			"38400") RS485_BAUDRATE=38400;;
			"57600") RS485_BAUDRATE=57600;;
			"115200") RS485_BAUDRATE=115200;;
			*) RS485_BAUDRATE=19200;;
		esac

		case "$RS485_PARITY" in
			"none") RS485_PARITY="-parenb -parodd";;
			"even") RS485_PARITY="parenb -parodd";;
			"odd") RS485_PARITY="parenb parodd";;
			*) RS485_PARITY="parenb -parodd";;
		esac

		case "$RS485_FLOWCTRL" in
			"none") RS485_FLOWCTRL="-crtscts -ixon -ixoff -echo";;
			"XonXoff") RS485_FLOWCTRL="-crtscts ixon ixoff -echo";;
			*) RS485_FLOWCTRL="-crtscts -ixon -ixoff -echo";;
		esac

		/bin/stty -F /dev/rs485 $RS485_BAUDRATE $RS485_PARITY $RS485_FLOWCTRL raw

		procd_open_instance
		procd_set_param command modbus_serial_master --rs485 $RS485_BAUDRATE
		procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-60} ${respawn_retry:-0}
		procd_close_instance
	fi
}

service_triggers() {
	procd_add_reload_trigger "modbus_serial_master" "modbus_master_alarms"
}

reload_service() {
	procd_set_param file /etc/config/modbus_serial_master /etc/config/modbus_master_alarms
	stop
	start
}
