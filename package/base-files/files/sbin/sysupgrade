#!/bin/sh
. /lib/functions.sh
. /lib/functions/system.sh

# initialize defaults
RAMFS_COPY_BIN=""	# extra programs for temporary ramfs root
RAMFS_COPY_DATA=""	# extra data files
export MTD_CONFIG_ARGS=""
export INTERACTIVE=0
export VERBOSE=1
export SAVE_CONFIG=1
export SAVE_OVERLAY=0
export DELAY=
export CONF_IMAGE=
export CONF_BACKUP_LIST=0
export CONF_BACKUP=
export CONF_RESTORE=
export NEED_IMAGE=
export HELP=0
export FORCE=0
export TEST=0
export PRE_FW_POST=0
export NO_PACKAGES=0
export NO_USER_CFG=

# parse options
while [ -n "$1" ]; do
	case "$1" in
		-i) export INTERACTIVE=1;;
		-d) export DELAY="$2"; shift;;
		-v) export VERBOSE="$(($VERBOSE + 1))";;
		-q) export VERBOSE="$(($VERBOSE - 1))";;
		-n) export SAVE_CONFIG=0;;
		-c) export SAVE_OVERLAY=1;;
		-u|--user-config) export NO_PACKAGES=1 CONF_BACKUP="$2" NEED_IMAGE=1 NO_HWINFO="yes" \
			NO_USER_CFG=1; shift;;
		-b|--create-backup) export NO_PACKAGES=1 CONF_BACKUP="$2" NEED_IMAGE=1 NO_HWINFO="yes"; shift;;
		-B|--create-backup-with-packages) export CONF_BACKUP="$2" NEED_IMAGE=1 NO_HWINFO="yes"; shift;;
		-p|--create-backup-without-profiles) export NO_PACKAGES=1 CONF_BACKUP="$2" NO_PROFILES="yes" NO_HWINFO="yes" NEED_IMAGE=1; shift;;
		-l|--list-backup) export CONF_BACKUP_LIST=1; break;;
		-f) export CONF_IMAGE="$2"; shift;;
		-F|--force) export FORCE=1;;
		-r|--restore-backup) export CONF_RESTORE="$2" NEED_IMAGE=1; shift;;
		-T|--test) export TEST=1;;
		-k|--pre_fw_post) export PRE_FW_POST=1 ;;
		-a|--partition) export PART_NAME="$2"; shift;;
		-h|--help) export HELP=1; break;;
		-*)
			echo "Invalid option: $1"
			exit 1
		;;
		*) break;;
	esac
	shift;
done

export CONFFILES=/tmp/sysupgrade.conffiles
export CONF_TAR=/tmp/sysupgrade.tgz

export ARGV="$*"
export ARGC="$#"

[ -z "$ARGV" -a -z "$NEED_IMAGE" -o $HELP -gt 0 ] && {
	cat <<EOF
Usage: $0 [<upgrade-option>...] <image file or URL>
       $0 [-q] [-i] <backup-command> <file>

upgrade-option:
	-d <delay>   add a delay before rebooting
	-f <config>  restore configuration from .tar.gz (file or url)
	-i           interactive mode
	-c           attempt to preserve all changed files in /etc/
	-n           do not save configuration over reflash
	-T | --test
	             Verify image and config .tar.gz but do not actually flash.
	-a | --partition <partition name>
	             Specify the name of partition for firmware upgrade (default is "firmware")
	-F | --force
	             Flash image even if image checks fail, this is dangerous!
	-q           less verbose
	-v           more verbose
	-h | --help  display this help

backup-command:

	-b | --create-backup <file>
	             create .tar.gz of files specified in sysupgrade.conf
	             then exit. Does not flash an image. If file is '-',
	             i.e. stdout, verbosity is set to 0 (i.e. quiet).
 	-u | --user-config <file>
 				same as '-b | --create-backup', but without saving users default config.
	-B | --create-backup-with-packages <file>
	             same as '-b | --create-backup', but with saving custom tlt packages.
	-p | --create-backup-without-profiles <file>
	             same as '-b | --create-backup', but without saving '/etc/profiles'
	             directory.
	-l | --list-backup
	             list the files that would be backed up when calling
	             sysupgrade -b. Does not create a backup file.
        -r | --restore-backup <file>
                     restore a .tar.gz created with sysupgrade -b
                     then exit. Does not flash an image. If file is '-',
                     the archive is read from stdin.

EOF
	exit 1
}

[ -n "$ARGV" -a -n "$NEED_IMAGE" ] && {
	cat <<-EOF
		-b|--create-backup and -r|--restore-backup do not perform a firmware upgrade.
		Do not specify both -b|-r and a firmware image.
	EOF
	exit 1
}

# prevent messages from clobbering the tarball when using stdout
[ "$CONF_BACKUP" = "-" ] && export VERBOSE=0

add_uci_conffiles() {
	local file="$1"
	( find $(sed -ne '/^[[:space:]]*$/d; /^#/d; p' \
		/etc/sysupgrade.conf /lib/upgrade/keep.d/* 2>/dev/null) \
		-type f -follow 2>/dev/null;
	  opkg list-changed-conffiles ) | sort -u > "$file"
	return 0
}

add_overlayfiles() {
	local file="$1"
	find /overlay/etc/ -type f | sed \
		-e 's,^/overlay/,/,' \
		-e '\,/META_[a-zA-Z0-9]*$,d' \
		-e '\,/functions.sh$,d' \
		-e '\,/[^/]*-opkg$,d' \
	> "$file"
	return 0
}

# hooks
sysupgrade_image_check="platform_check_image"
[ $SAVE_OVERLAY = 0 -o ! -d /overlay/etc ] && \
	sysupgrade_init_conffiles="add_uci_conffiles" || \
	sysupgrade_init_conffiles="add_overlayfiles"

include /lib/upgrade

do_save_conffiles() {
	local conf_tar="${1:-$CONF_TAR}"

	[ -z "$(rootfs_type)" ] && {
		echo "Cannot save config while running from ramdisk."
		ask_bool 0 "Abort" && exit
		return 0
	}
	run_hooks "$CONFFILES" $sysupgrade_init_conffiles
	if [ -z "$NO_PROFILES" ]; then
		echo "/etc/profiles" >> "$CONFFILES"
	else
		sed -i '/\etc\/config\/teltonika/d' "$CONFFILES"
		sed -i '/\etc\/config\/profiles/d' "$CONFFILES"
	fi
	if [ -n "$NO_HWINFO" ]; then
		sed -i '/\etc\/config\/hwinfo/d' "$CONFFILES"
	fi

	# Do not save rms_connect_timer config if
	# making a backup, but if flashing firmware with keep-settings, save this config.
	if [ -n "$CONF_BACKUP" ]; then
		sed -i '/\etc\/config\/rms_connect_timer/d' "$CONFFILES"
	fi

	sed -i '/\etc\/config\/ucitrack/d' "$CONFFILES"

	echo "/etc/chilli/www/hotspotlogin.tmpl" >> "$CONFFILES"
	echo "/etc/chilli/www/themes/active_logo" >> "$CONFFILES"
	echo "/etc/chilli/www/themes/active_background" >> "$CONFFILES"
	echo "/etc/firewall.user" >> "$CONFFILES"
	echo "/www/luci-static/resources/loginpage.css" >> "$CONFFILES"

	[ -z "$NO_USER_CFG" ] && \
		echo "/etc/default-config/config.tar.gz" >> "$CONFFILES"

	if [ "$NO_PACKAGES" -eq 0 ]; then
		opkg_packets=`opkg list-installed | grep tlt_custom_pkg | awk -F " " '{print $1}'`
		if [ -f /etc/package_restore.txt ]; then
		    mv /etc/package_restore.txt /etc/package_restore.tmp
		fi
		for i in $opkg_packets; do
		    tlt_name=`cat /usr/lib/opkg/info/"$i".control | grep tlt_name | awk -F ": " '{print $2}'`
			echo "$i - $tlt_name" >> /etc/package_restore.txt
		done
		if [ -f /etc/package_restore.txt ]; then
			echo "/etc/package_restore.txt" >> "$CONFFILES"
		fi
	fi

	#remembering monitoring status
	rms_status=`uci get rms_connect_mqtt.rms_connect_mqtt.enable`
	uci set rms_connect_mqtt.rms_connect_mqtt.enable_on_rp="$rms_status"
	uci commit rms_connect_mqtt

	ask_bool 0 "Edit config file list" && vi "$CONFFILES"
	v "Saving config files..."
	[ "$VERBOSE" -gt 1 ] && TAR_V="v" || TAR_V=""
	tar c${TAR_V}zf "$conf_tar" -T "$CONFFILES" 2>/dev/null

	rm -f "$CONFFILES"
	if [ "$NO_PACKAGES" -eq 0 ]; then
	    rm -f "/etc/package_restore.txt"
	    if [ -f /etc/package_restore.tmp ]; then
		    mv /etc/package_restore.tmp /etc/package_restore.txt
		fi
	fi
}

if [ $CONF_BACKUP_LIST -eq 1 ]; then
	add_uci_conffiles "$CONFFILES"
	cat "$CONFFILES"
	rm -f "$CONFFILES"
	exit 0
fi

if [ -n "$CONF_BACKUP" ]; then
	do_save_conffiles "$CONF_BACKUP"
	exit $?
fi

if [ -f "$CONF_RESTORE" ] || [ "$CONF_RESTORE" = "-" ]; then
	[ "$VERBOSE" -gt 1 ] && TAR_V="v" || TAR_V=""
	tar -C / -x${TAR_V}zf "$CONF_RESTORE"
	cp /rom/etc/config/hwinfo /etc/config
	exit $?
fi

type platform_check_image >/dev/null 2>/dev/null || {
	echo "Firmware upgrade is not implemented for this platform."
	exit 1
}

for check in $sysupgrade_image_check; do
	( eval "$check \"\$ARGV\"" ) || {
		if [ $FORCE -eq 1 ]; then
			echo "Image check '$check' failed but --force given - will update anyway!"
			break
		else
			echo "Image check '$check' failed."
			exit 1
		fi
	}
done

if [ -n "$CONF_IMAGE" ]; then
	case "$(get_magic_word $CONF_IMAGE cat)" in
		# .gz files
		1f8b) ;;
		*)
			echo "Invalid config file. Please use only .tar.gz files"
			exit 1
		;;
	esac
	get_image "$CONF_IMAGE" "cat" > "$CONF_TAR"
	export SAVE_CONFIG=1
elif ask_bool $SAVE_CONFIG "Keep config files over reflash"; then
	do_save_conffiles
	export SAVE_CONFIG=1
else
	export SAVE_CONFIG=0
fi

if [ $TEST -eq 1 ]; then
	exit 0
fi

# Writing to log does not work after upgrade so write now
# /usr/bin/eventslog -i -t EVENTS -n Reboot -e "Request after FW upgrade"
if [ $PRE_FW_POST -eq 1 ]; then
	pre=`uci get -q auto_update.auto_update.pre`
	post=`uci get -q auto_update.auto_update.post`
	if [ $pre -gt 0 ]; then
		chmod 777 /tmp/pre_update_script.sh
		eval "/tmp/pre_update_script.sh" 2>/dev/null
	fi
	if [ $post -gt 0 ]; then
		chmod 777 /tmp/post_update_script.sh
	fi
fi

run_hooks "" $sysupgrade_pre_upgrade

ubus call system upgrade
touch /tmp/sysupgrade

if [ ! -f /tmp/failsafe ] ; then
	kill_remaining TERM
	sleep 3
	kill_remaining KILL
fi

if [ -n "$(rootfs_type)" ]; then
	v "Switching to ramdisk..."
	if [ $post -gt 0 ]; then
		run_ramfs '. /lib/functions.sh; include /lib/upgrade; do_upgrade "-p"'
	else
		run_ramfs '. /lib/functions.sh; include /lib/upgrade; do_upgrade'
	fi
else
	if [ $post -gt 0 ]; then
		do_upgrade "-p"
	else
		do_upgrade
	fi
fi
