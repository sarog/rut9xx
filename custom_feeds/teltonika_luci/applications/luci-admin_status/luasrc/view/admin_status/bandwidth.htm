<%#
LuCI - Lua Configuration Interface
Copyright 2010 Jo-Philipp Wich <xm@subsignal.org>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

$Id: bandwidth.htm 8325 2012-03-04 14:06:30Z jow $

-%>

<%-
	local ntm = require "luci.model.network".init()
	local uci = require "luci.model.uci".cursor()

	local dev
	local devices = { }
	for _, dev in luci.util.vspairs(luci.sys.net.devices(1)) do
		if dev ~= "lo" then
			devices[#devices+1] = dev
		end
	end

	local curdev = luci.dispatcher.context.requestpath
	      curdev = curdev[#curdev] ~= "bandwidth" and curdev[#curdev] or devices[1]
-%>

<%+header%>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/javascript">//<![CDATA[
	var bwxhr = new XHR();

	var G;
	var TIME = 0;
	var RXB  = 1;
	var RXP  = 2;
	var TXB  = 3;
	var TXP  = 4;

	var width  = 760;
	var height = 300;
	var step   = 5;

	var data_wanted = Math.floor(width / step);
	var data_fill   = 0;
	var data_stamp  = 0;

	var data_rx = [ ];
	var data_tx = [ ];

	var line_rx;
	var line_tx;

	var label_25;
	var label_50;
	var label_75;

	var label_rx_cur;
	var label_rx_avg;
	var label_rx_peak;

	var label_tx_cur;
	var label_tx_avg;
	var label_tx_peak;

	var label_scale;
	var scale_max = 1;

	function bandwidth_label(bytes, br)
	{
		var uby = 'KBytes';
		var kby = (bytes / 1024);

		if (kby >= 1024)
		{
			uby = 'MBytes';
			kby = kby / 1024;
		}

		var ubi = 'Kbits';
		var kbi = (bytes * 8 / 1024);

		if (kbi >= 1024)
		{
			ubi = 'Mbits';
			kbi = kbi / 1024;
		}
		
		
		
		return String.format("%f %s/s%s(%f %s/s)",
			kbi.toFixed(2), ubi,
			br ? '<br />' : ' ',
			kby.toFixed(2), uby
		);
	}
	
	
	function aprox_label(data_max)
	{
		var scale_mark;
		if(data_max <= 1024){ //1kb
			scale_max = data_max/1024;
			scale_mark = 1024;
		}else if(data_max <=10240){ //10kb
			scale_max = data_max/10240;
			scale_mark = 10240;
		}else if(data_max <=20480){ //20kb
			scale_max = data_max/20480;
			scale_mark = 20480;
		}else if(data_max <=51200){ //50kb
			scale_max = data_max/51200;
			scale_mark = 51200;
		}else if(data_max <=102400){ //100kb
			scale_max = data_max/102400;
			scale_mark = 102400;
		}else if(data_max <=512000){ //500kb
			scale_max = data_max/512000;
			scale_mark = 512000;
		}else if(data_max <=1024000){ //1mb
			scale_max = data_max/1024000;
			scale_mark = 1024000;
		}else if(data_max <=5120000){ //5mb
			scale_max = data_max/5120000;
			scale_mark = 5120000;
		}else if(data_max <=10240000){ //10mb
			scale_max = data_max/10240000;
			scale_mark = 10240000;
		}else if(data_max <=15360000){ //15mb
			scale_max = data_max/15360000;
			scale_mark = 15360000;
		}else if(data_max <=20480000){ //20mb
			scale_max = data_max/20480000;
			scale_mark = 20480000;
		}
		else{ //50mb
			scale_max = data_max/51200000;
			scale_mark = 51200000;
		}
			
		
		label_25.firstChild.data = bandwidth_label(0.25 * scale_mark);
		label_50.firstChild.data = bandwidth_label(0.5 * scale_mark);
		label_75.firstChild.data = bandwidth_label(0.75 * scale_mark);
	
	}

	/* wait for SVG */
	var pirmas_atvaizdavimas = 1;
	window.setTimeout(
		function() {
			var svg = document.getElementById('bwsvg');

			try {
				G = svg.getSVGDocument
					? svg.getSVGDocument() : svg.contentDocument;
			}
			catch(e) {
				G = document.embeds['bwsvg'].getSVGDocument();
			}

			if (!G)
			{
				window.setTimeout(arguments.callee, 1000);
			}
			else
			{
				/* find sizes */
				width       = svg.offsetWidth  - 2;
				height      = svg.offsetHeight - 2;
				data_wanted = Math.ceil(width / step) + 25;
				
				/* prefill datasets */
				for (var i = 0; i < data_wanted; i++)
				{
					data_rx[i] = 0;
					data_tx[i] = 0;
				}

				/* find svg elements */
				line_rx = G.getElementById('rx');
				line_tx = G.getElementById('tx');

				label_25 = G.getElementById('label_25');
				label_50 = G.getElementById('label_50');
				label_75 = G.getElementById('label_75');

				label_rx_cur  = document.getElementById('rx_bw_cur');
				label_rx_avg  = document.getElementById('rx_bw_avg');
				label_rx_peak = document.getElementById('rx_bw_peak');

				label_tx_cur  = document.getElementById('tx_bw_cur');
				label_tx_avg  = document.getElementById('tx_bw_avg');
				label_tx_peak = document.getElementById('tx_bw_peak');

				label_scale   = document.getElementById('scale');


				/* plot horizontal time interval lines */
				for (var i = width % (step * 60); i < width; i += step * 60)
				{
					var line = G.createElementNS('http://www.w3.org/2000/svg', 'line');
						line.setAttribute('x1', i);
						line.setAttribute('y1', 0);
						line.setAttribute('x2', i);
						line.setAttribute('y2', '100%');
						line.setAttribute('style', 'stroke:black;stroke-width:0.1');

					var text = G.createElementNS('http://www.w3.org/2000/svg', 'text');
						text.setAttribute('x', i + 5);
						text.setAttribute('y', 15);
						text.setAttribute('style', 'fill:#999999; font-size:9pt');
						text.appendChild(G.createTextNode(Math.round((width - i) / step / 60) + 'm'));

					label_25.parentNode.appendChild(line);
					label_25.parentNode.appendChild(text);
				}

				label_scale.innerHTML = String.format('<%:(%d minutes window, %d seconds interval)%>', data_wanted / 60, 3);

				/* render datasets, start update interval */
				XHR.poll(3, '<%=build_url("admin/status/realtime/bandwidth_status", curdev)%>', null,
					function(x, data)
					{
						var data_max   = 0;
						var data_scale = 0;

						var data_rx_avg = 0;
						var data_tx_avg = 0;

						var data_rx_peak = 0;
						var data_tx_peak = 0;

						for (var i = data_stamp ? 0 : 1; i < data.length; i++)
						{
							/* skip overlapping entries */
							if (data[i][TIME] <= data_stamp)
								continue;

							/* normalize difference against time interval */
							if (i > 0)
							{
								var time_delta = data[i][TIME] - data[i-1][TIME];
								if (time_delta)
								{
									data_rx.push((data[i][RXB] - data[i-1][RXB]) / time_delta);
									data_tx.push((data[i][TXB] - data[i-1][TXB]) / time_delta);
								}
							}
						}

						/* cut off outdated entries */
						data_rx = data_rx.slice(data_rx.length - data_wanted, data_rx.length);
						data_tx = data_tx.slice(data_tx.length - data_wanted, data_tx.length);
									
						// papildomas nunulinimas pirma karta atsidarius
						if(pirmas_atvaizdavimas == 1){
							pirmas_atvaizdavimas = 0;
							for (var i = 0; i < data_rx.length -1 ; i++){
								data_rx[i] = 0;
								data_tx[i] = 0;
							}
						}
						
						//vidurkinimas (kad nebutu daug grafiko spygliu)
						for (var i = 190; i < data_rx.length -5 ; i++){	
							data_rx[i] =  (data_rx[i] + data_rx[i+1] + data_rx[i+2] + data_rx[i+3] + data_rx[i+4])/5;
							data_tx[i] =  (data_tx[i] + data_tx[i+1] + data_tx[i+2] + data_tx[i+3] + data_tx[i+4])/5;
						}
						
						//vidurkinimo pabaiga

						/* find peak */
						for (var i = 0; i < data_rx.length-25; i++)
						{
							data_max = Math.max(data_max, data_rx[i]);
							data_max = Math.max(data_max, data_tx[i]);

							data_rx_peak = Math.max(data_rx_peak, data_rx[i]);
							data_tx_peak = Math.max(data_tx_peak, data_tx[i]);
						}
						
						// find average
						data_rx_avg = (data_rx[data_rx.length-15] + data_rx[data_rx.length-16] + data_rx[data_rx.length-17] + data_rx[data_rx.length-18] + data_rx[data_rx.length-19] + data_rx[data_rx.length-20] + data_rx[data_rx.length-21] + data_rx[data_rx.length-22]) / 8;
						data_tx_avg = (data_tx[data_tx.length-15] + data_tx[data_tx.length-16] + data_tx[data_tx.length-17] + data_tx[data_tx.length-18] + data_tx[data_tx.length-19] + data_tx[data_tx.length-20] + data_tx[data_tx.length-21] + data_tx[data_tx.length-22]) / 8;

						/* remember current timestamp, calculate horizontal scale */
						data_stamp = data[data.length-1][TIME];
						data_scale = height / (data_max * 1.1);

						/* plot data */
						aprox_label(data_max);
						var pt_rx = '0,' + height;
						var pt_tx = '0,' + height;

						var y_rx = 0;
						var y_tx = 0;

						for (var i = 0; i < data_rx.length; i++)
						{
							var x = i * step;
							y_rx = height - Math.floor(data_rx[i] * data_scale * scale_max * 1.1);
							y_tx = height - Math.floor(data_tx[i] * data_scale * scale_max * 1.1);
							pt_rx += ' ' + x + ',' + y_rx;
							pt_tx += ' ' + x + ',' + y_tx;
						}

						pt_rx += ' ' + width + ',' + y_rx + ' ' + width + ',' + height;
						pt_tx += ' ' + width + ',' + y_tx + ' ' + width + ',' + height;

						line_rx.setAttribute('points', pt_rx);
						line_tx.setAttribute('points', pt_tx);

						label_rx_cur.innerHTML = bandwidth_label(data_rx[data_rx.length-1], true);
						label_tx_cur.innerHTML = bandwidth_label(data_tx[data_tx.length-1], true);

						label_rx_avg.innerHTML = bandwidth_label(data_rx_avg, true);
						label_tx_avg.innerHTML = bandwidth_label(data_tx_avg, true);

						label_rx_peak.innerHTML = bandwidth_label(data_rx_peak, true);
						label_tx_peak.innerHTML = bandwidth_label(data_tx_peak, true);
					}
				);
			}
		}, 1000
	);


//]]></script>

<h2><a id="content" name="content"><%=translate("Realtime Traffic")%></a></h2>

<ul class="cbi-tabmenu">
	<%
	local moduleVidPid = luci.util.trim(luci.sys.exec("uci get -q system.module.vid"))..":"..luci.util.trim(luci.sys.exec("uci get -q system.module.pid"))
	for _, dev in ipairs(devices) do
		name = pcdata(dev)
			if name == "usb0" then name   = translate("WiMAX")
			elseif name == "eth0" then name = translate("LAN")
			elseif name == "eth1" then name = translate("WAN (Wired)")
			elseif name == "eth1(wimax)" then name   = translate("WiMAX")
			elseif name == "eth2" and moduleVidPid == "12D1:1573" then name = translate("Mobile")
			elseif name == "eth2" and moduleVidPid == "12D1:15C1" then name = translate("Mobile")
			elseif name == "eth2" and moduleVidPid == "12D1:15C3" then name = translate("Mobile")
			elseif name == "wlan0" then name  = translate("WiFi")
			elseif name == "tun0" then name   = translate("HotSpot")
			elseif name == "gre_tunnel" then name   = translate("GRE")
			elseif name == "br-lan" then name = translate("Bridge")
			elseif name == "3g-ppp" then name = translate("Mobile")
			elseif name == "wwan0"  then name = translate("Mobile")
			--elseif name == "tap0" then name   = translate("VPN TAP")
		 else
			name = ""
		 end
		 if name ~= "" then
			if dev == "tun0" then
				if curdev == "tun0" or curdev == "tun1" or curdev == "tun2" or curdev == "tun3" then %>
					<li class="cbi-tab"><a href="<%=pcdata(dev)%>"><%=name%></a></li>
				<%else%>
					<li class="cbi-tab-disabled"><a href="<%=pcdata(dev)%>"><%=name%></a></li>
				<%end
			else%>
				<li class="cbi-tab<%= dev == curdev and "" or "-disabled" %>"><a href="<%=pcdata(dev)%>"><%=name%></a></li>
		<%	end
		end
	 end %>
</ul>
<% if curdev == "tun0" or curdev == "tun1" or curdev == "tun2" or curdev == "tun3" then %>
<ul class="cbi-tabmenu">
	<%
	local nixio  = require "nixio"
	function debug(string)
		os.execute("/usr/bin/logger \"" ..string.. "\"")
	end

	function get_ip(dev)
		local ip
		for k, v in ipairs(nixio.getifaddrs()) do
			if v.family == "inet" then
				if v.name == dev then
					ip = v.addr
				end
			end
		end
		return ip
	end

	function get_ssid(dev)
		local section
		local ssid
		uci:foreach("coovachilli", "general", function(s)
			if s.net then
				local config_tun_ip = s.net:match("%d+.%d+.%d+.%d+")
				debug("device" .. dev)
				local tun_ip = get_ip(dev)
				debug("tunip" .. tun_ip)
				debug("config_tun_ip" .. config_tun_ip)
				if tun_ip and config_tun_ip and tun_ip == config_tun_ip then
					section = s[".name"]
				end
			end
		end)
		debug("section" .. section)
		uci:foreach("wireless", "wifi-iface", function(s)
			if s.hotspotid == section then
				debug(s.ssid)
				ssid =  s.ssid
			end
		end)
		return ssid
	end
	debug("DEBUG")
	for _, dev in ipairs(devices) do
		name = pcdata(dev)
		if name == "tun0" then
			debug("name " .. name)
			name   = get_ssid(name) or translate("HotSpot")
		elseif name == "tun1" then name   = get_ssid(name) or translate("HotSpot")
		elseif name == "tun2" then name   = get_ssid(name) or translate("HotSpot")
		elseif name == "tun3" then name   = get_ssid(name) or translate("HotSpot")
		else
			name = ""
		 end
		 if name ~= "" then %>
			<li class="cbi-tab<%= dev == curdev and "" or "-disabled" %>"><a href="<%=pcdata(dev)%>"><%=name%></a></li>
		<% end
	 end %>
</ul>
<%end%>

<embed id="bwsvg" style="width:100%; height:300px; border:1px solid #000000; background-color:#FFFFFF" src="<%=resource%>/bandwidth.svg" />
<div style="text-align:right"><small id="scale">-</small></div>
<br />

<table style="width:100%; table-layout:fixed" cellspacing="5">
	<tr>
		<td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid blue" onmouseover="ShowHint(this, '<%=translate('Incoming traffic on selected network interface')%>')" onmouseout="HideHint(this)"><%=translate("Inbound:")%></strong></td>
		<td id="rx_bw_cur">0 kbit/s<br />(0 KB/s)</td>

		<td style="text-align:right; vertical-align:top"><strong onmouseover="ShowHint(this, '<%=translate('Average of incoming traffic on selected network interface')%>')" onmouseout="HideHint(this)"><%=translate("Average:")%></strong></td>
		<td id="rx_bw_avg">0 kbit/s<br />(0 KB/s)</td>

		<td style="text-align:right; vertical-align:top"><strong onmouseover="ShowHint(this, '<%=translate('Peak of incoming traffic on selected network interface')%>')" onmouseout="HideHint(this)"><%=translate("Peak:")%></strong></td>
		<td id="rx_bw_peak">0 kbit/s<br />(0 KB/s)</td>
	</tr>
	<tr>
		<td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid green" onmouseover="ShowHint(this, '<%=translate('Outgoing traffic on selected network interface')%>')" onmouseout="HideHint(this)"><%=translate("Outbound:")%></strong></td>
		<td id="tx_bw_cur">0 kbit/s<br />(0 KB/s)</td>

		<td style="text-align:right; vertical-align:top"><strong onmouseover="ShowHint(this, '<%=translate('Average of outgoing traffic on selected network interface')%>')" onmouseout="HideHint(this)"><%=translate("Average:")%></strong></td>
		<td id="tx_bw_avg">0 kbit/s<br />(0 KB/s)</td>

		<td style="text-align:right; vertical-align:top"><strong onmouseover="ShowHint(this, '<%=translate('Peak of outgoing traffic on selected network interface')%>')" onmouseout="HideHint(this)"><%=translate("Peak:")%></strong></td>
		<td id="tx_bw_peak">0 kbit/s<br />(0 KB/s)</td>
	</tr>
</table>
<div class="disclaimer_msg">
	<span>* <%=translate("Your carrier\'s data usage accounting may differ. " .. brand(1) .. " is not liable should any accounting discrepancies occur.")%></span>
</div>
<%+footer%>
