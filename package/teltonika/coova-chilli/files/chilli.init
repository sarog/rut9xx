#!/bin/sh /etc/rc.common

START=99
STOP=89
USE_PROCD=1

LOCAL_USERS=/var/run/chilli_localusers
DB_PATH=/var/hotspot.db
DB_PATH_FLASH=/etc/chilli/hotspot.db

set_conf() {
	echo "$1=\"$2\"" >>"$chilli_conf"
}

set_conf_bool() {
	local option=$1 value=$2
	[ "$2" = "1" ] && echo "$1" >>"$chilli_conf"
}
chilli_network_trigger() {
	procd_add_interface_trigger "interface.*.up" "$1" /etc/init.d/chilli restart
}

service_triggers() {
	procd_add_reload_trigger "chilli"
}

config_cb() {
	local chilli_inst="$2" mac_addr

	case "$1" in
	chilli)
		option_cb() {
			set_chilli "$@"
		}
		list_cb() {
			set_chilli_list "$@"
		}
		if [ "$chilli_inst" != "" ]; then
			chilli_conf="/var/run/chilli_${chilli_inst}.conf"
			if [ -e "$chilli_conf" ]; then
				rm -f "$chilli_conf"
			fi
			eval "start_chilli_$chilli_inst=0"
			mac_addr="$(cat /sys/class/net/eth0/address)"
			set_conf "dhcpmac" 02:"${mac_addr:3}"
		fi
		;;
	*)
		option_cb() {
			return
		}
		list_cb() {
			return
		}
		return 0
		;;
	esac
}

set_dyn_limits() {
	local section=$1 group=$2 type=$3

	config_get name "${section}" name
	{
		[[ -z "$group" ]] || [[ "$group" != "$name" ]] || [[ -z "$type" ]]
	} && return 0

	config_get timeout "${section}" defsessiontimeout 0
	config_get idle "${section}" defidletimeout 0
	config_get dw_max "${section}" downloadlimit 0
	config_get up_max "${section}" uploadlimit 0
	config_get warning "${section}" warning 0
	config_get dw_bwidth "${section}" downloadbandwidth 0
	config_get upl_bwidth "${section}" uploadbandwidth 0
	config_get expiration "${section}" expiration 0
	config_get period "${section}" period "3"
	option=$(get_option "$period")
	config_get start "${section}" "$option" "1"

	set_conf "${type}sessiontimeout" "$timeout"
	set_conf "${type}idletimeout" "$idle"
	set_conf "${type}bandwidthmaxdown" "$dw_bwidth"
	set_conf "${type}bandwidthmaxup" "$upl_bwidth"
	set_conf "${type}maxdownload" "$dw_max"
	set_conf "${type}maxupload" "$up_max"
	set_conf "${type}warning" "$warning"
	set_conf "${type}limitperiod" "$period"
	set_conf "${type}limitstart" "$start"
}

set_chilli() {
	local option=$1 value=$2
	local route mode port

	case "$1" in
	# UCI settings
	network)
		eval "dhcpif_$CONFIG_SECTION=$2"
		;;
	enabled)
		[ "$2" = "1" ] && eval "start_chilli_$CONFIG_SECTION=1"
		;;
	# boolean settings
	debug | dhcpbroadcast | nodynip | vlanlocation | locationstopstart | locationcopycalled | \
		locationimmediateupdate | locationopt82 | coanoipcheck | noradallow | proxymacaccept | \
		proxyonacct | dhcpmacset | dhcpradius | noc2c | eapolenable | uamanydns | uamanyip | uamnatanyip | \
		nouamsuccess | nowispr1 | nowispr2 | domaindnslocal | radsec | macauth | macreauth | macauthdeny | \
		macallowlocal | strictmacauth | strictdhcp | ieee8021q | only8021q | radiusoriginalurl | swapoctets | \
		statusfilesave | wpaguests | openidauth | papalwaysok | mschapv2 | chillixml | acctupdate | dnsparanoia | \
		seskeepalive | usetap | noarpentries | framedservice | scalewin | redir | injectwispr | redirurl | \
		routeonetone | nousergardendata | uamgardendata | uamotherdata | withunixipc | uamallowpost | redirssl | \
		uamuissl | layer3 | patricia | redirdnsreq | dhcpnotidle | ipv6 | ipv6only | registerusers | tos | testtime | \
		trialusers | duplicateusers | nochallenge)
		{
			[ "$2" = "true" ] || [ "$2" = "1" ]
		} && set_conf_bool "$@"
		;;
	_mode)
		[ "$value" != "radius" ] && {
			set_conf "radiusserver1" "localhost"
			set_conf "radiusserver2" "localhost"
		}
		case "$value" in
		local)
			set_conf "localusers" "$LOCAL_USERS"
			;;
		sms_otp)
			set_conf_bool "smsusers" 1
			;;
		mac_auth)
			set_conf_bool "macusers" 1
			;;
		esac
		;;
	_landingpage)
		[[ "$value" = "int" ]] && {
			_protocol=$(uci -q get chilli."${CONFIG_SECTION}"._protocol)
			uamlisten=$(uci -q get chilli."${CONFIG_SECTION}".uamlisten)
			mode=$(uci -q get chilli."${CONFIG_SECTION}"._mode)

			case "$mode" in
			sms_otp)
				route="smsauth"
				;;
			mac_auth)
				route="macauth"
				;;
			esac

			[ "$_protocol" = "https" ] && port=444

			set_conf "uamserver" \
				"${_protocol:-http}://${uamlisten}:${port:-81}/cgi-bin/hotspot/${route:-userpass}"
		}
		;;
	_success)
		case "$value" in
		original)
			set_conf_bool "successuserurl" 1
			;;
		custom)
			_success_url=$(uci -q get chilli."${CONFIG_SECTION}"._success_url)
			set_conf "successurlcustom" "$_success_url"
			;;
		esac
		;;
	_dyn_users_group)
		eval "chilli_group_$CONFIG_SECTION=$value"
		;;
	_trial_users_group)
		eval "chilli_trial_group_$CONFIG_SECTION=$value"
		;;
	_* | uamdomain_*) ;;

	*)
		set_conf "$@"
		;;
	esac
}

set_chilli_list() {
	local ifname option=$1 value=$2

	case "$1" in
	moreif)
		get_dhcp_interface "ifname" "$value"
		set_conf "$option" "$ifname"
		;;
	*)
		set_conf "$@"
		;;
	esac
}

get_option() {
	case $1 in
	3)
		echo "day"
		;;
	2)
		echo "weekday"
		;;
	1)
		echo "hour"
		;;
	esac
}

set_group() {
	local section=$1 u_group=$2 user_section=$3
	local name username password option
	local timeout idle dw_max up_max dw_bwidth upl_bwidth period start

	config_get name "${section}" name
	[[ "$u_group" != "$name" ]] && return 0

	config_get username "${user_section}" username
	config_get password "${user_section}" password
	[[ -n "$username" ]] && [[ -n "$password" ]] || return 0

	config_get timeout "${user_section}" defsessiontimeout
	[[ -n "$timeout" ]] || config_get timeout "${section}" defsessiontimeout 0

	config_get idle "${user_section}" defidletimeout
	[[ -n "$idle" ]] || config_get idle "${section}" defidletimeout 0

	config_get dw_max "${user_section}" downloadlimit
	[[ -n "$dw_max" ]] || config_get dw_max "${section}" downloadlimit 0

	config_get up_max "${user_section}" uploadlimit
	[[ -n "$up_max" ]] || config_get up_max "${section}" uploadlimit 0

	config_get dw_bwidth "${user_section}" downloadbandwidth
	[[ -n "$dw_bwidth" ]] || config_get dw_bwidth "${section}" downloadbandwidth 0

	config_get upl_bwidth "${user_section}" uploadbandwidth
	[[ -n "$upl_bwidth" ]] || config_get upl_bwidth "${section}" uploadbandwidth 0

	config_get period "${user_section}" period
	if [[ -n "$period" ]]; then
		option=$(get_option "$period")
		config_get start "${user_section}" "$option" "1"
	else
		config_get period "${section}" period "3"
		option=$(get_option "$period")
		config_get start "${section}" "$option" "1"
	fi

	echo "$username:$password:$timeout:$idle:$dw_max:$up_max:$dw_bwidth:$upl_bwidth:$period:$start" >>$LOCAL_USERS
}

set_user() {
	local section=$1
	local group

	config_get group "${section}" group "default"
	[[ -n "$group" ]] || return 0

	config_foreach set_group group "${group}" "${section}"
}

reload_users() {
	[ -e $LOCAL_USERS ] && rm -rf $LOCAL_USERS
	config_foreach set_user user
}

net_type_wifi() {
	[ "$(echo "$1" | grep -c "wifi")" -gt 0 ]
}

get_dhcp_interface() {
	local var net=$2

	if net_type_wifi "$net"; then
		. /etc/chilli/wireless.sh
		wireless_get_ifname var "$net"
		[ -z "$var" ] && {
			var=$(cat /var/run/"${net}".wifi_id)
		}
	else
		. /lib/functions/network.sh
		network_get_device var "$net"
	fi

	[ -n "$var" ] && eval "$1=$var" || unset "$1"
}

start_chilli() {
	local cfg="$1" dhcpif=$2
	local start_chilli=$(eval "echo \$start_chilli_$cfg")
	local chilli_group=$(eval "echo \$chilli_group_$cfg")
	local trial_group=$(eval "echo \$chilli_trial_group_$cfg")
	local base="/var/run/chilli_${cfg}"
	local network=$(eval "echo \$dhcpif_$cfg")
	local uamdomainfile macaddr

	config_get uamdomainfile "$cfg" "uamdomainfile"

	[[ "$start_chilli" = "0" ]] && return
	[[ -z "$dhcpif" ]] && get_dhcp_interface dhcpif "$network"
	[[ -z "$dhcpif" ]] && return
	[[ -n "$chilli_group" ]] && config_foreach set_dyn_limits group "$chilli_group" "dyn"
	[[ -n "$trial_group" ]] && config_foreach set_dyn_limits group "$trial_group" "trial"
	macaddr=$(cat /sys/class/net/"${dhcpif}"/address)

	procd_open_instance "$cfg"
	procd_open_trigger
	net_type_wifi "$network" || chilli_network_trigger "$network"
	procd_close_trigger
	procd_set_param command /usr/sbin/chilli
	procd_set_param file "${base}.conf"
	procd_set_param file "$uamdomainfile"
	procd_append_param command --testtime --fg --conf "${base}.conf" --pidfile "${base}.pid"
	procd_append_param command --cmdsocket "${base}.sock" --unixipc "${base}.ipc"
	procd_append_param command --dhcpif "$dhcpif" ${macaddr:+--nasmac ${macaddr//:/-}}
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_close_instance
}

start_service() {
	config_load chilli
	config_foreach start_chilli chilli "$@"
	reload_users
}

stop_service() {
	rm -f /var/run/chilli_*
	[[ -f ${DB_PATH} ]] && cp ${DB_PATH} ${DB_PATH_FLASH}
}

reload_service() {
	stop
	start
}

boot() {
	[[ -f ${DB_PATH_FLASH} ]] && cp ${DB_PATH_FLASH} ${DB_PATH}
	start
}
