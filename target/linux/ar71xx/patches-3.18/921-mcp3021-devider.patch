--- a/drivers/hwmon/mcp3021.c
+++ b/drivers/hwmon/mcp3021.c
@@ -37,6 +37,24 @@
 #define MCP3221_SAR_MASK	0xfff
 #define MCP3221_OUTPUT_RES	12	/* 12-bit resolution */
 
+static int facelift = 0;
+module_param(facelift,int,0660);
+
+static int mcp3021_vdd_ref =			3260;
+static int mcp3021_vdd_ref_FL =			3300;
+
+static int mcp3021_output_scale =		4;
+static int mcp3021_output_scale_FL =	4;
+
+static int mcp3221_output_scale =		1;
+static int mcp3221_output_scale_FL =	1;
+
+static int mcp3221_input_devident =		131;
+static int mcp3221_input_devident_FL =	115;
+
+static int mcp3221_input_devisor =		18;
+static int mcp3221_input_devisor_FL =	15;
+
 enum chips {
 	mcp3021,
 	mcp3221
@@ -51,6 +69,7 @@
 	u16 sar_shift;
 	u16 sar_mask;
 	u8 output_res;
+	u8 output_scale;
 };
 
 static int mcp3021_read16(struct i2c_client *client)
@@ -80,7 +99,22 @@
 
 static inline u16 volts_from_reg(struct mcp3021_data *data, u16 val)
 {
-	return DIV_ROUND_CLOSEST(data->vdd * val, 1 << data->output_res);
+	long int divident;
+	long int devisor;
+
+	if (val == 0)
+		return 0;
+
+	val = val * data->output_scale - data->output_scale / 2;
+	if (facelift) {
+		divident = val * data->vdd * mcp3221_input_devident_FL;
+		devisor = (1 << data->output_res) * data->output_scale * mcp3221_input_devisor_FL;
+	} else {
+		divident = val * data->vdd * mcp3221_input_devident;
+		devisor = (1 << data->output_res) * data->output_scale * mcp3221_input_devisor;
+	}
+
+	return DIV_ROUND_CLOSEST(divident, devisor);
 }
 
 static ssize_t show_in_input(struct device *dev, struct device_attribute *attr,
@@ -122,12 +156,20 @@
 		data->sar_shift = MCP3021_SAR_SHIFT;
 		data->sar_mask = MCP3021_SAR_MASK;
 		data->output_res = MCP3021_OUTPUT_RES;
+		if (facelift)
+			data->output_scale = mcp3021_output_scale_FL;
+		else
+			data->output_scale = mcp3021_output_scale;
 		break;
 
 	case mcp3221:
 		data->sar_shift = MCP3221_SAR_SHIFT;
 		data->sar_mask = MCP3221_SAR_MASK;
 		data->output_res = MCP3221_OUTPUT_RES;
+		if (facelift)
+			data->output_scale = mcp3221_output_scale_FL;
+		else
+			data->output_scale = mcp3221_output_scale;
 		break;
 	}
 
@@ -136,7 +178,10 @@
 		if (data->vdd > MCP3021_VDD_MAX || data->vdd < MCP3021_VDD_MIN)
 			return -EINVAL;
 	} else {
-		data->vdd = MCP3021_VDD_REF;
+		if (facelift)
+			data->vdd = mcp3021_vdd_ref_FL;
+		else
+			data->vdd = mcp3021_vdd_ref;
 	}
 
 	err = sysfs_create_file(&client->dev.kobj, &dev_attr_in0_input.attr);
