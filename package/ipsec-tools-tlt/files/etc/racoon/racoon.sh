#!/bin/sh
# Start racoon

. /etc/functions.sh

ConfigFile="/var/racoon/racoon.conf"
PSKFile="/var/racoon/psk.txt"
UserFile="/var/racoon/xauthuser.txt"
CertificatePath="/var/racoon/cert"
CallParameters=""
RoadWarriorRemote="anonymous"
RoadWarriorDNS=""
RoadWarriorDomain=""
RoadWarriorCerts=""
MainConfigDone=0

UserConfig()
{
	local enabled
	local xauth
	local name
	local password
	local crt_subject

	config_get_bool enabled $1 enabled 0
	[[ "$enabled" == "0" ]] && return

	config_get_bool xauth       $1 xauth       0
	config_get      name        $1 name        ""
	config_get      password    $1 password    ""
	config_get      crt_subject $1 crt_subject ""

	if [ $xauth -eq 1 -a "$name" != "" -a "$password" != "" ]; then
		echo "$name $password" >> $UserFile
	fi

	if [ "$crt_subject" != "" ]; then
		RoadWarriorCerts="${RoadWarriorCerts}peers_identifier asn1dn \"$crt_subject\";"
	fi
}

CreateSA() {
	local LocalEndpoint=`ip route get $3 | awk -F"src" '/src/{gsub(/ /,"");print $2}'`

	echo "spdadd $1 $2 any -P out ipsec \
				esp/tunnel/$LocalEndpoint-$3/unique; \
				spdadd $2 $1 any -P in ipsec \
				esp/tunnel/$3-$LocalEndpoint/unique; \
			 " | setkey -c 1>&2
}

RoadWarriorSubnet() {
	local i

	let "i=255<<(24-${1#*/}+8)&255"
	echo "  netmask4 255.255.255.$i;"

	i="${1%/*}"
	let "i=${i##*.}+1"
	echo "  network4 ${1%.*}.$i;"
}

MainConfig() {
	local foreground
	local debug
	local listen

	config_get_bool foreground        $1 foreground 0
	config_get_bool debug             $1 debug      0
	config_get      listen            $1 listen     ""
	config_get      RoadWarriorDNS    $1 dns        ""
	config_get      RoadWarriorDomain $1 domain     ""

	[[ $foreground -ne 0 ]] && CallParameters="-F"
	[[ $debug -ne 0 ]]      && CallParameters=$CallParameters" -d"

	echo "# auto generated by /etc/init.d/racoon"
	echo "path pre_shared_key \"$PSKFile\";"
	echo "path certificate \"$CertificatePath\";"
	echo "padding {"
	echo "  maximum_length 20; randomize off;"
	echo "  strict_check off; exclusive_tail off;"
	echo "}"
	echo "timer {"
	echo "  counter 5; interval 20 sec; persend 1;"
	echo "  phase1 30 sec; phase2 15 sec;"
	echo "}"
	echo ""

	if [ "$listen" != "" ]; then
		echo "listen {"
		config_list_foreach "$1" listen AddListenIP
		echo "}"
		echo ""
	fi
	MainConfigDone=1
}

AddListenIP() {
	local value="$1"
	listenIP=`ifconfig $value 2>/dev/null | awk '/inet addr:/ { sub(/addr:/, ""); print $2 }'`
	if [ "$listenIP" != "" ]; then
		echo "  isakmp $listenIP;"
		echo "  isakmp_natt $listenIP [4500];"
	fi
}

TunnelConfig() {
	local enabled
	local remote
	local remote_device
	local preshared_key
	local exchange_mode
	local my_identifier
	local my_identifier_type
	local certificate
	local remote_device
	local dpd_delay
	local nat_traversal

	config_get_bool enabled "$1" enabled 0
	[[ "$enabled" == "0" ]] && return

	config_get remote             "$1" remote
	config_get remote_device      "$1" remote_device ""
	config_get pre_shared_key     "$1" pre_shared_key ""
	config_get exchange_mode      "$1" exchange_mode
	config_get my_identifier      "$1" my_identifier ""
	config_get my_identifier_type "$1" my_identifier_type ""
	config_get certificate        "$1" certificate ""
	config_get dpd_delay          "$1" dpd_delay ""
	config_get nat_traversal      "$1" nat_traversal


	if [ "$remote" != "$RoadWarriorRemote" ]; then
		if [ -x /usr/bin/dnsip ] ; then
			remote=`/usr/bin/dnsip $remote`
		else
			remote=`nslookup "$remote" localhost | awk 'NR==5 { print $3 }'`
		fi
		prg=`racoon -V 2>/dev/null| grep "ipsec-tools 0.8" | wc -l`
		if [ $prg -eq 0 ]; then
			echo "remote $remote {"
		else
			echo "remote \"$1\" {"
			echo "  remote_address $remote;"
		fi

	else
		echo "remote anonymous {"
		echo "  generate_policy on;"
	fi

	if [ "$pre_shared_key" != "" ]; then
		if [ "$remote" != "$RoadWarriorRemote" ]; then
			echo "$remote $pre_shared_key" >> $PSKFile
		else
			echo "* $pre_shared_key" >> $PSKFile
		fi
		if [ "$my_identifier" != "" -a "$my_identifier_type" != "" ]; then
			echo "  my_identifier $my_identifier_type  \"$my_identifier\";"
		fi
	elif [ "$certificate" != "" ]; then
		echo "  verify_cert on;"
		echo "  certificate_type x509 \"$certificate.crt\" \"$certificate.key\";"
		echo "  my_identifier asn1dn;"
		if [ "$remote" == "$RoadWarriorRemote" ]; then
			echo "  verify_identifier on;"
			echo "  "$RoadWarriorCerts
		else
			echo "  peers_identifier asn1dn;"
		fi
	fi
	echo "  exchange_mode $exchange_mode;"
	echo "  proposal_check obey;"

	if [ "$nat_traversal" != "" ]; then
			echo "  nat_traversal on;"
	fi

	if [ "$dpd_delay" != "" ]; then
			echo "  dpd_delay $dpd_delay;"
	fi

	echo "  rekey on;"

	config_list_foreach "$1" p1_proposal ConfigP1
	echo "}"

	AnonSA=0
	config_list_foreach "$1" sainfo ConfigSA $tunnel $remote
	[[ "$remote" == "$RoadWarriorRemote" ]] && echo "}"
}

ConfigP1() {
	local lifetime
	local encryption_algorithm
	local hash_algorithm
	local authentication
	local dh_group

	config_get lifetime              "$1" lifetime 3600
	config_get encryption_algorithm  "$1" encryption_algorithm
	config_get hash_algorithm        "$1" hash_algorithm
	config_get authentication_method "$1" authentication_method
	config_get dh_group              "$1" dh_group

	echo "  proposal {"
	echo "    lifetime time $lifetime sec;"
	echo "    encryption_algorithm $encryption_algorithm;"
	echo "    hash_algorithm $hash_algorithm;"
	echo "    authentication_method $authentication_method;"
	echo "    dh_group $dh_group;"
	echo "  }"
}

ConfigSA() {
	local tunnel=`echo $2 | cut -d" " -f1`
	local sainfo=$1
	local remote=`echo $2 | cut -d" " -f2`
	local local_subnet
	local local_nat
	local remote_subnet
	local p2_proposal
	local pfs_group
	local lifetime
	local encryption_algorithm
	local local authentication_algorithm
	local remote_lan
	local remote_mask


	#config_get local_subnet		"$sainfo"      local_subnet
	config_get local_nat			"$sainfo"      local_nat ""
	#config_get remote_subnet		"$sainfo"      remote_subnet
	config_get remote_lan			"$sainfo"      remote_lan
	config_get remote_mask		"$sainfo"      remote_mask
	config_get p2_proposal		"$sainfo"      p2_proposal
	config_get pfs_group			"$p2_proposal" pfs_group
	config_get lifetime			"$p2_proposal" lifetime 3600
	config_get encryption_algorithm	"$p2_proposal" encryption_algorithm
	config_get authentication_algorithm	"$p2_proposal" authentication_algorithm


	local_ip=`uci get network.lan.ipaddr`
	local_mask=`uci get network.lan.netmask`
	local_ip=`/bin/ipcalc.sh $local_ip $local_mask | grep NETWORK | cut -d= -f2`
	local_mask=`/bin/ipcalc.sh $local_ip $local_mask | grep PREFIX | cut -d= -f2`
	local_subnet=$local_ip"/"$local_mask
	remote_subnet=$remote_lan"/"$remote_mask

	[[ "$local_nat" != "" ]] && local_subnet=$local_nat

	if [ "$remote" = "$RoadWarriorRemote" ]; then
		let AnonSA=$AnonSA+1
	fi
	[[ $AnonSA -eq 1 ]] && echo "sainfo anonymous {"
	if [ $AnonSA -eq 0 ]; then
		CreateSA $local_subnet $remote_subnet $remote
		echo "sainfo address $local_subnet any address $remote_subnet any {"
	fi
	if [ $AnonSA -lt 2 ]; then
#     [[ "$remote_device" != "asa" ]] &&  echo "  pfs_group $pfs_group;"
# Customized by Teltonika
	[[ "$pfs_group" != "no_pfs" ]] &&  echo "  pfs_group $pfs_group;"
		echo "  lifetime time $lifetime sec;"
		echo "  encryption_algorithm $encryption_algorithm;"
		echo "  authentication_algorithm $authentication_algorithm;"
		echo "  compression_algorithm deflate;"
		echo "}"
	fi
	if [ $AnonSA -eq 1 ]; then
		echo "mode_cfg {"
		echo "  auth_source system;"
		echo "  conf_source local;"
		[[ "$RoadWarriorDNS"    != "" ]] && echo "  dns4 $RoadWarriorDNS;"
		[[ "$RoadWarriorDomain" != "" ]] && echo "  default_domain \"$RoadWarriorDomain\";"
		RoadWarriorSubnet $remote_subnet
	fi
	if [ $AnonSA -gt 0 ]; then
		echo "  split_network include $local_subnet;"
	fi
}

CertConfig() {
	local val
	local hash

	for opt in key crt; do
		config_get val "$1" "$opt" ""
		if [ "$val" != "" ]; then
			echo $val | sed "s/-\+[A-Z ]\+-\+/\n&\n/g" \
								| sed "s/.\{50,50\}/&\n/g" \
								| sed "/^$/d" > $CertificatePath/$1.$opt
			chmod 600 $CertificatePath/$1.$opt
		fi
	done

	hash=`openssl x509 -noout -hash -in $CertificatePath/$1.crt`
	ln -s -f $CertificatePath/$1.crt $CertificatePath/$hash.0
}

CheckEnvironment() {
	local prg
	for prg in /usr/bin/openssl /usr/sbin/ip; do
		if [ ! -x $prg ]; then
			echo "Error! $prg missing. Exit now."
			exit
		fi
	done

	mkdir -m 0700 -p /var/racoon
	mkdir -m 0700 -p $CertificatePath
}

KeepAlive () {
	local address
	local period
	local on
	local iface

	config_get on keepalive enabled 0

	if [ $on -eq 1 ]; then
		config_get address	"keepalive"	ping_ipaddr
		config_get period	"keepalive"	ping_period
		iface=`cat /tmp/state/network | grep network.lan.ifname | cut -d= -f2`

		if [ -z $iface ]; then
			iface="br-lan"
		fi

		/sbin/keep_alive.sh $address $period $iface &
	fi
}

start() {
	. /lib/teltonika-functions.sh

	config_load racoon

	local ena
	config_get ena ipsec1 enabled 0

	if [ $ena -eq 1 ]; then

		EXTERNAL=`tlt_wait_for_wan_or_backup ipsec`

		local active=`ps | grep /usr/sbin/racoon | grep -v grep | wc -l`

		CheckEnvironment

		if [ $active -eq 0 -o "$1" = "force" ]; then
			rm $UserFile 2>/dev/null
			config_load users
			config_foreach UserConfig user
		fi

	config_load racoon

		if [ $active -ne 0 -a "$1" != "force" ]; then
			PSKFile=/dev/null
			ConfigFile=/dev/null
		else
			config_foreach CertConfig certificate
			echo "# auto generated by /etc/init.d/racoon" > $PSKFile
			chmod 600 $PSKFile
		fi

		config_foreach MainConfig racoon > $ConfigFile
		if [ $MainConfigDone -eq 0 ]; then
			MainConfig XXX > $ConfigFile
		fi

		echo "flush; spdflush;" | setkey -c
		config_foreach TunnelConfig tunnel >> $ConfigFile

		if [ $active -eq 0 ]; then
		/usr/sbin/racoon $CallParameters -f $ConfigFile
		KeepAlive
		/sbin/racoon-tracker &
		elif [ "$1" = "force" ]; then
			racoonctl reload-config
		fi
	fi
}

stop_wrapper() {
	pid=`ps | grep /usr/sbin/racoon | grep -v grep | awk '{ print $1}'`
	[[ "$pid" != "" ]] && kill $pid
	/bin/sleep 2
	pid=`ps | grep /usr/sbin/racoon | grep -v grep | awk '{ print $1}'`
	[[ "$pid" != "" ]] && kill -9 $pid
	echo "flush; spdflush;" | setkey -c

	pid=`ps | grep /sbin/keep_alive.sh | grep -v grep | awk '{ print $1}'`
	[[ "$pid" != "" ]] && kill $pid

	killall -9 racoon-tracker > /dev/null 2>&1
	rm -r /var/run/racoon-tracker* > /dev/null 2>&1

	all_pids=`ps | awk '/\/[e]tc\/racoon\/racoon.sh/{print $1}'`
	if [ -n "$1" ]; then
		kill_pids="${all_pids/$1/}"
	else
		kill_pids=$all_pids
	fi
	kill -9 $kill_pids
}

 stop() {
	stop_wrapper $$
 }

restart() {
	stop
	start
	#start force
}

$1

