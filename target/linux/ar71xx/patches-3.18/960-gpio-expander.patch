Index: linux-3.18.44/drivers/spi/spi-gpio.c
===================================================================
--- linux-3.18.44.orig/drivers/spi/spi-gpio.c
+++ linux-3.18.44/drivers/spi/spi-gpio.c
@@ -541,7 +541,23 @@ static struct platform_driver spi_gpio_d
 	.probe		= spi_gpio_probe,
 	.remove		= spi_gpio_remove,
 };
-module_platform_driver(spi_gpio_driver);
+static int __init spi_gpio_init(void)
+{
+	int ret;
+
+	ret = platform_driver_register(&spi_gpio_driver);
+	if (ret)
+		printk(KERN_ERR "spi_gpio: probe failed: %d\n", ret);
+
+	return ret;
+}
+fs_initcall(spi_gpio_init);
+
+static void __exit spi_gpio_exit(void)
+{
+	platform_driver_unregister(&spi_gpio_driver);
+}
+module_exit(spi_gpio_exit);
 
 MODULE_DESCRIPTION("SPI master driver using generic bitbanged GPIO ");
 MODULE_AUTHOR("David Brownell");
Index: linux-3.18.44/drivers/gpio/gpio-pca953x.c
===================================================================
--- linux-3.18.44.orig/drivers/gpio/gpio-pca953x.c
+++ linux-3.18.44/drivers/gpio/gpio-pca953x.c
@@ -14,6 +14,7 @@
 #include <linux/module.h>
 #include <linux/init.h>
 #include <linux/gpio.h>
+#include <linux/leds.h>
 #include <linux/interrupt.h>
 #include <linux/i2c.h>
 #include <linux/platform_data/pca953x.h>
@@ -23,6 +24,17 @@
 #endif
 #include <asm/unaligned.h>

+#include <asm/mach-ath79/ar71xx_regs.h>
+
+#include <../arch/mips/ath79/dev-leds-gpio.h>
+#include <../arch/mips/ath79/dev-gpio-buttons.h>
+#include <../arch/mips/ath79/common.h>
+
+#include <linux/platform_device.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/spi_gpio.h>
+#include <linux/spi/74x164.h>
+
 #define PCA953X_INPUT		0
 #define PCA953X_OUTPUT		1
 #define PCA953X_INVERT		2
@@ -98,6 +110,233 @@ struct pca953x_chip {
 	int	chip_type;
 };

+#define RUT900_GPIO_LED_BAR0		23
+#define RUT900_GPIO_LED_BAR1		24
+#define RUT900_GPIO_LED_BAR2		25
+#define RUT900_GPIO_LED_BAR3		26
+#define RUT900_GPIO_LED_BAR4		27
+#define RUT900_GPIO_LED_ST_RED		28
+#define RUT900_GPIO_LED_ST_GRE		29
+
+#define RUT900_GPIO_SIM_SEL		30
+
+#define RUT900_GPIO_I2C_LED_BAR0		48
+#define RUT900_GPIO_I2C_LED_BAR1		49
+#define RUT900_GPIO_I2C_LED_BAR2		50
+#define RUT900_GPIO_I2C_LED_BAR3		51
+#define RUT900_GPIO_I2C_LED_BAR4		52
+#define RUT900_GPIO_I2C_LED_ST_GRE		54
+#define RUT900_GPIO_I2C_LED_ST_RED		53
+
+#define RUT900_GPIO_I2C_SIM_SEL			55
+
+#define RUT900_GPIO_SHIFT_SER		12
+#define RUT900_GPIO_SHIFT_SRCLK		4
+#define RUT900_GPIO_SHIFT_RCLK		20
+
+#define RUT900_74HC_GPIO_BASE       AR934X_GPIO_COUNT
+
+#define RUT900_GPIO_BTN_EXPANDER	4
+
+#define RUT900_GPIO_DIN1		21
+#define RUT900_GPIO_DIN2		19
+
+#define RUT900_GPIO_BTN_RESET		15
+
+#define RUT900_KEYS_POLL_INTERVAL	20	/* msecs */
+#define RUT900_KEYS_DEBOUNCE_INTERVAL	(3 * RUT900_KEYS_POLL_INTERVAL)
+#define RUT900_KEYS_DEBOUNCE_INTERVAL_DIN 20
+
+#define RUT900_SSR_BIT_0			0
+#define RUT900_SSR_BIT_1			1
+#define RUT900_SSR_BIT_2			2
+#define RUT900_SSR_BIT_3			3
+#define RUT900_SSR_BIT_4			4
+#define RUT900_SSR_BIT_5			5
+#define RUT900_SSR_BIT_6			6
+#define RUT900_SSR_BIT_7			7
+
+static struct gpio_led rut900_leds_gpio[] __initdata = {
+	{
+		.name 		= "sim_sel",
+		.gpio 		= RUT900_GPIO_SIM_SEL,
+		.active_low	= 0,
+		.default_state 	= LEDS_GPIO_DEFSTATE_ON,
+	},
+	{
+		.name		= "signal_bar0",
+		.gpio		= RUT900_GPIO_LED_BAR0,
+		.active_low	= 0,
+	},
+	{
+		.name		= "signal_bar1",
+		.gpio		= RUT900_GPIO_LED_BAR1,
+		.active_low	= 0,
+	},
+	{
+		.name		= "signal_bar2",
+		.gpio		= RUT900_GPIO_LED_BAR2,
+		.active_low	= 0,
+	},
+	{
+		.name		= "signal_bar3",
+		.gpio		= RUT900_GPIO_LED_BAR3,
+		.active_low	= 0,
+	},
+	{
+		.name		= "signal_bar4",
+		.gpio		= RUT900_GPIO_LED_BAR4,
+		.active_low	= 0,
+	},
+	{
+		.name		= "status_green",
+		.gpio		= RUT900_GPIO_LED_ST_GRE,
+		.active_low	= 0,
+	},
+	{
+		.name		= "status_red",
+		.gpio		= RUT900_GPIO_LED_ST_RED,
+		.active_low	= 0,
+	},
+
+};
+
+static struct gpio_led rut900_leds_i2c_gpio[] __initdata = {
+	{
+		.name 		= "sim_sel",
+		.gpio 		= RUT900_GPIO_I2C_SIM_SEL,
+		.active_low 	= 0,
+		.default_state 	= LEDS_GPIO_DEFSTATE_ON,
+	},
+	{
+		.name		= "signal_bar0",
+		.gpio		= RUT900_GPIO_I2C_LED_BAR0,
+		.active_low	= 0,
+	},
+	{
+		.name		= "signal_bar1",
+		.gpio		= RUT900_GPIO_I2C_LED_BAR1,
+		.active_low	= 0,
+	},
+	{
+		.name		= "signal_bar2",
+		.gpio		= RUT900_GPIO_I2C_LED_BAR2,
+		.active_low	= 0,
+	},
+	{
+		.name		= "signal_bar3",
+		.gpio		= RUT900_GPIO_I2C_LED_BAR3,
+		.active_low	= 0,
+	},
+	{
+		.name		= "signal_bar4",
+		.gpio		= RUT900_GPIO_I2C_LED_BAR4,
+		.active_low	= 0,
+	},
+	{
+		.name		= "status_green",
+		.gpio		= RUT900_GPIO_I2C_LED_ST_GRE,
+		.active_low	= 0,
+	},
+	{
+		.name		= "status_red",
+		.gpio		= RUT900_GPIO_I2C_LED_ST_RED,
+		.active_low	= 0,
+	},
+
+};
+
+static struct gpio_keys_button rut900_gpio_keys[] __initdata = {
+	{
+		.desc		= "Reset button",
+		.type		= EV_KEY,
+		.code		= KEY_RESTART,
+		.debounce_interval = RUT900_KEYS_DEBOUNCE_INTERVAL,
+		.gpio		= RUT900_GPIO_BTN_RESET,
+		.active_low	= 1,
+	},
+	{
+		.desc		= "DIN1",
+		.type		= EV_KEY,
+		.code		= BTN_1,
+		.debounce_interval = RUT900_KEYS_DEBOUNCE_INTERVAL,
+		.gpio		= RUT900_GPIO_DIN1,
+		.active_low	= 1,
+	},
+	{
+		.desc		= "DIN2",
+		.type		= EV_KEY,
+		.code		= BTN_2,
+		.debounce_interval = RUT900_KEYS_DEBOUNCE_INTERVAL,
+		.gpio		= RUT900_GPIO_DIN2,
+		.active_low	= 1,
+	},
+};
+
+static struct gpio_keys_button rut900_gpio_i2c_keys[] __initdata = {
+	{
+		.desc		= "Reset button",
+		.type		= EV_KEY,
+		.code		= KEY_RESTART,
+		.debounce_interval = RUT900_KEYS_DEBOUNCE_INTERVAL,
+		.gpio		= RUT900_GPIO_BTN_RESET,
+		.active_low	= 1,
+	},
+	{
+		.desc		= "Expander interrupt",
+		.type		= EV_KEY,
+		.code		= KEY_RFKILL,
+		.debounce_interval = RUT900_KEYS_DEBOUNCE_INTERVAL_DIN,
+		.gpio		= RUT900_GPIO_BTN_EXPANDER,
+	},
+};
+
+static u8 rut900_ssr_initdata[] __initdata = {
+		0x0,
+		0x0
+};
+
+static struct gen_74x164_chip_platform_data rut900_ssr_data = {
+	.base		= RUT900_74HC_GPIO_BASE,
+	.num_registers	= ARRAY_SIZE(rut900_ssr_initdata),
+	.init_data	= rut900_ssr_initdata,
+};
+
+static struct spi_board_info  rut900_ssr_info[] = {
+	{
+		.bus_num		= 1,
+		.chip_select		= 0,
+		.max_speed_hz		= 10000000,
+		.modalias		= "74x164",
+		.platform_data		= &rut900_ssr_data,
+		.controller_data	= (void *) RUT900_GPIO_SHIFT_RCLK,
+	},
+};
+
+static struct spi_gpio_platform_data rut900_spi_data = {
+	.sck		= RUT900_GPIO_SHIFT_SRCLK,
+	.miso		= SPI_GPIO_NO_MISO,
+	.mosi		= RUT900_GPIO_SHIFT_SER,
+	.num_chipselect	= 1,
+};
+
+static struct platform_device rut900_ssr_device = {
+	.name		= "spi_gpio",
+	.id		= 1,
+	.dev = {
+		.platform_data = &rut900_spi_data,
+	},
+};
+
+
+static void rut900_ssr_init(void)
+{
+	/* The gpio interface */
+	platform_device_register(&rut900_ssr_device);
+	/* I2C devices */
+	spi_register_board_info(rut900_ssr_info, ARRAY_SIZE(rut900_ssr_info));
+}
+
 static inline struct pca953x_chip *to_pca(struct gpio_chip *gc)
 {
 	return container_of(gc, struct pca953x_chip, gpio_chip);
@@ -593,8 +832,23 @@ static int device_pca953x_init(struct pc
 	u8 val[MAX_BANK];
 
 	ret = pca953x_read_regs(chip, PCA953X_OUTPUT, chip->reg_output);
-	if (ret)
+	if (ret) {
+		ath79_register_gpio_keys_polled(-1, RUT900_KEYS_POLL_INTERVAL,
+				ARRAY_SIZE(rut900_gpio_keys),
+				rut900_gpio_keys);
+		ath79_register_leds_gpio(-1, ARRAY_SIZE(rut900_leds_gpio),
+				rut900_leds_gpio);
+		ath79_gpio_output_enable(RUT900_GPIO_SHIFT_SRCLK, 0);
+		ath79_gpio_output_select(RUT900_GPIO_SHIFT_SRCLK, AR934X_GPIO_OUT_GPIO);
+		rut900_ssr_init();
 		goto out;
+	} else {
+		ath79_register_gpio_keys_polled(-1, RUT900_KEYS_POLL_INTERVAL,
+				ARRAY_SIZE(rut900_gpio_i2c_keys),
+				rut900_gpio_i2c_keys);
+		ath79_register_leds_gpio(-1, ARRAY_SIZE(rut900_leds_i2c_gpio),
+			 rut900_leds_i2c_gpio);
+    	}
 
 	ret = pca953x_read_regs(chip, PCA953X_DIRECTION,
 			       chip->reg_direction);
