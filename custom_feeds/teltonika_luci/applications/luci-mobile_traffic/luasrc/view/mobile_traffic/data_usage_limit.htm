<%#
LuCI - Lua Configuration Interface
Copyright 2010 Jo-Philipp Wich <xm@subsignal.org>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

$Id: load.htm 8325 2012-03-04 14:06:30Z jow $

-%>

<%-
	local curdev = luci.dispatcher.context.requestpath
	      curdev = curdev[#curdev] ~= "limit" and curdev[#curdev] or "sim1"
-%>

<%+header%>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/javascript">//<![CDATA[
	var bwxhr = new XHR();

	var G;
	var TIME = 0;
	var L01   = 1;
	var L05   = 2;
	var L15  = 3;

	var width  = 760;
	var height = 300;
	var step   = 30
	var data_wanted = Math.floor(width / step);
	var data_fill   = 0;
	var data_stamp  = 0;

	var data_01  = [ ];
	var data_05  = [ ];
	var data_15 = [ ];
	var data_time = [ ];

	var line_01;
	var line_05;
	var line_15;

	var label_25;
	var label_050;
	var label_75;


	var label_all_sum;
	var label_tx_sum;
	var label_rx_sum;
	
	var label_15_peak;

	var d = new Date();
	var n = d.getTime();
	var counter = 0;


	/* wait for SVG */
	window.setTimeout(
		function() {
			var svg = document.getElementById('bwsvg');

			try {
				G = svg.getSVGDocument
					? svg.getSVGDocument() : svg.contentDocument;
			}
			catch(e) {
				G = document.embeds['bwsvg'].getSVGDocument();
			}

			if (!G)
			{
				window.setTimeout(arguments.callee, 1000);
			}
			else
			{

				
				label_all_sum  = document.getElementById('lb_all_sum');
				label_tx_sum  = document.getElementById('lb_tx_sum');
				label_rx_sum  = document.getElementById('lb_rx_sum');
				
	
				line_05 = G.getElementById('load05');
				line_15 = G.getElementById('load15');

				label_25 = G.getElementById('label_25');
				label_50 = G.getElementById('label_50');
				label_75 = G.getElementById('label_75');
				
				/* render datasets, start update interval */
				XHR.get('<%=build_url("admin/status/usage/usage_limit", curdev)%>', null,
					function(x, data)
					{
						var job = 0;
						if (data != null){
							job = data[0][4];
						}
						
						function month(){
							var data_max   = 0;
							var data_scale = 0;

							var data_01_avg = 0;
							
							var data_all_sum = 0;
							var data_rx_sum = 0;
							var data_tx_sum = 0;
							
							var data_01_peak = 0;
							var data_05_peak = 0;
							
							/* find sizes */
							width       = svg.offsetWidth  - 2;
							height      = svg.offsetHeight - 2;
							
							var step = width/data.length;
							
							//var first = new Date(data[0][0]*1000);
							var first = new Date(data[data.length-1][0]*1000);
							
							var first_moth = first.getMonth();
							var first_day = first.getDate();
							
							if (first_moth == 0){
								var back_month = 11;
							}
							else{
								var back_month = first_moth - 1;
							}
				
							var second
							var second_month
							var day

							for (var i = data.length-1; i >= 0; i--)
							//~ for (var i = 0; i <= data.length-1; i++)
							{
								/* skip overlapping entries */
								if (data[i][TIME] <= data_stamp)
									continue;
								second = new Date(data[i][TIME]*1000);
								second_month = second.getMonth();
								day = second.getDate();
								//~ console.log(first_moth,"==", second_month, "&&", day, ">=", data[i][5], "||", back_month, "==", second_month, "&&", day, "<", data[i][5]);
								//~ console.log(typeof(first_moth),"==", typeof(second_month), "&&", typeof(day), ">=", typeof(data[i][5]), "||", typeof(back_month), "==", typeof(second_month), "&&", typeof(day), "<", typeof(data[i][5]));
								
								if (first_day >= data[i][5]){
									if (((first_moth == second_month) && (day >= data[i][5])) || ((back_month == second_month) && (day <= data[i][5])) ){
										
										data_05.push(data[i][L05]);
										data_15.push(data[i][L15]);
										data_time.push(data[i][TIME]);
									}
									else
									{
										console.log("else")
										break;
										
									}
								}
								else{
									if (((first_moth == second_month) && (day < data[i][5])) || ((back_month == second_month) && (day >= data[i][5]))){
									
										data_05.push(data[i][L05]);
										data_15.push(data[i][L15]);
										data_time.push(data[i][TIME]);
									}
									else
									{
										console.log("else")
										break;
										
									}
								}
								
							}
							
							data_05.reverse();
							data_15.reverse();
							data_time.reverse();
						
							
							/* find peak */
							for (var i = 0; i < data_15.length; i++)
							{
								counter++;
								
								data_max = Math.max(data_max, data_05[i]);
								data_max = Math.max(data_max, data_15[i]);

								
								data_all_sum += data_15[i]+data_05[i];

								if (i > 0)
								{
									
									data_rx_sum = (data_rx_sum + data_05[i]);
									data_tx_sum = (data_tx_sum + data_15[i]);
								}
								else
								{
									
									data_rx_sum = data_05[i];
									data_tx_sum = data_15[i];
								}
							}
							
							

							/* remember current timestamp, calculate horizontal scale */
							data_stamp = data[data.length-1][TIME];
							data_scale = height / (data_max * 1.1);


							/* plot data */
							
							var pt_05 = '0,' + height;
							var pt_15 = '0,' + height;

							
							var y_05 = 0;
							var y_15 = 0;

							for (var i = 0; i < data_15.length; i++)
							{
								var x = i * step;
								
								y_05 = height - Math.floor(data_05[i] * data_scale);
								y_15 = height - Math.floor(data_15[i] * data_scale);

								
								pt_05 += ' ' + x + ',' + y_05;
								pt_15 += ' ' + x + ',' + y_15;
								
								if (data_time[i] > 0){
									var time = new Date(data_time[i]*1000);
									var day = time.getUTCDate();
								}

								var line = G.createElementNS('http://www.w3.org/2000/svg', 'line');
								line.setAttribute('x1', x);
								line.setAttribute('y1', 0);
								line.setAttribute('x2', x);
								line.setAttribute('y2', '100%');
								line.setAttribute('style', 'stroke:black;stroke-width:0.1');

								var text = G.createElementNS('http://www.w3.org/2000/svg', 'text');
								text.setAttribute('x', x + 5);
								text.setAttribute('y', 15);
								text.setAttribute('style', 'fill:#999999; font-size:9pt');
								if (day){
								text.appendChild(G.createTextNode(day + 'd'));
								}
								label_25.parentNode.appendChild(line);
								label_25.parentNode.appendChild(text);						
							}

							
							pt_05 += ' ' + width + ',' + y_05 + ' ' + width + ',' + height;
							pt_15 += ' ' + width + ',' + y_15 + ' ' + width + ',' + height;

							function convert(val){
								var val;
								if (val >= 1073741824){
									val = (val / 1073741824).toFixed(2)+" GB";
								}
								if (val >= 1048576){
									val = (val / 1048576).toFixed(2)+" MB";
								}
								if (val >= 1024){
									val = (val / 1024).toFixed(2)+" KB";
								}

								return val
							}
						
							
							line_05.setAttribute('points', pt_05);
							line_15.setAttribute('points', pt_15);

							label_25.firstChild.data = (convert(0.25 * data_max));
							label_50.firstChild.data = (convert(0.50 * data_max ));
							label_75.firstChild.data = ( convert(0.75 * data_max));
							
							label_all_sum.innerHTML = (convert(data_all_sum));
							label_rx_sum.innerHTML = (convert(data_rx_sum));
							label_tx_sum.innerHTML = (convert(data_tx_sum));
						}
		//---------------------------------------------------WEEK--------------------------------------------------------------				
						function week(){
							var data_max   = 0;
							var data_scale = 0;

							var data_01_avg = 0;
							
							var data_all_sum = 0;
							var data_rx_sum = 0;
							var data_tx_sum = 0;
							
							var data_01_peak = 0;
							var data_05_peak = 0;
							var width       = svg.offsetWidth  - 2;
							var height      = svg.offsetHeight - 2;
							var first 
							var first_day 
							var n = 0;
							
							var today = new Date(data[data.length-1][0]*1000).getDay();
							
							//data = data.slice(Math.floor(data.length - first_day), data.length);
							for (var i = data.length-1; i >= 0; i--)
							{
								first = new Date(data[i][0]*1000);
								first_day = first.getDay();
								console.log("firstday: ", first_day);
								/* skip overlapping entries */
								if (data[i][TIME] <= data_stamp)
									continue;
								if (today >= data[i][5]){
									console.log("1");
									if (i < data.length-1 && first_day < data[i][5])
										break;
								}
								else
								{
									console.log("2");
									if (i < data.length-1 && first_day == data[i][5]){
										data_05.push(data[i][L05]);
										data_15.push(data[i][L15]);
										data_time.push(data[i][TIME]);
										break;
									}
								}
								data_05.push(data[i][L05]);
								data_15.push(data[i][L15]);
								data_time.push(data[i][TIME]);
								
							}
							data_05.reverse();
							data_15.reverse();
							data_time.reverse();
							/* cut off outdated entries */
							//data_01 = data_01.slice(data_01.length - data_wanted, data_01.length);
	// 						data_05 = data_05.slice(data_05.length - data_wanted, data_05.length);
	// 						data_15 = data_15.slice(data_15.length - data_wanted, data_15.length);
	// 						data_time = data_time.slice(data_time.length - data_wanted, data_time.length);
							
							/* find peak */
							for (var i = 0; i < data_15.length; i++)
							{
								counter++;
								//data_max = Math.max(data_max, data_01[i]);
								data_max = Math.max(data_max, data_05[i]);
								data_max = Math.max(data_max, data_15[i]);

								//data_01_peak = Math.max(data_01_peak, data_01[i]);
								//data_05_peak = Math.max(data_05_peak, data_05[i]);
								data_all_sum += data_15[i]+data_05[i];

								if (i > 0)
								{
									//data_01_avg = (data_01_avg + data_01[i]) / 2;
									data_rx_sum = (data_rx_sum + data_05[i]);
									data_tx_sum = (data_tx_sum + data_15[i]);
								}
								else
								{
									//data_01_avg = data_01[i];
									data_rx_sum = data_05[i];
									data_tx_sum = data_15[i];
								}
							}

							/* remember current timestamp, calculate horizontal scale */
							data_stamp = data[data.length-1][TIME];
							data_scale = height / (data_max * 1.1);


							/* plot data */
							//var pt_01 = '0,' + height;
							var pt_05 = '0,' + height;
							var pt_15 = '0,' + height;

							//var y_01 = 0;
							var y_05 = 0;
							var y_15 = 0;
							var DayNames = [ '<%=translate("Sun.")%>', '<%=translate("Mon.")%>', '<%=translate("Tue.")%>', '<%=translate("Wed.")%>', '<%=translate("Thu.")%>', '<%=translate("Fri.")%>', '<%=translate("Sat.")%>' ];
							var step = width / data.length;
							
							for (var i = 0; i < data_15.length; i++)
							{
								var x = i * step;

								//y_01 = height - Math.floor(data_01[i] * data_scale);
								y_05 = height - Math.floor(data_05[i] * data_scale);
								y_15 = height - Math.floor(data_15[i] * data_scale);

								//pt_01 += ' ' + x + ',' + y_01;
								pt_05 += ' ' + x + ',' + y_05;
								pt_15 += ' ' + x + ',' + y_15;
								
								if (data_time[i] > 0){
									var time = new Date(data_time[i]*1000);
									var day = time.getDay();
								}

								var line = G.createElementNS('http://www.w3.org/2000/svg', 'line');
								line.setAttribute('x1', x);
								line.setAttribute('y1', 0);
								line.setAttribute('x2', x);
								line.setAttribute('y2', '100%');
								line.setAttribute('style', 'stroke:black;stroke-width:0.1');

								var text = G.createElementNS('http://www.w3.org/2000/svg', 'text');
								text.setAttribute('x', x + 5);
								text.setAttribute('y', 15);
								text.setAttribute('style', 'fill:#999999; font-size:9pt');
								if (day || day == 0){
								text.appendChild(G.createTextNode(DayNames[day]));
								}
								label_25.parentNode.appendChild(line);
								label_25.parentNode.appendChild(text);
								
								
								
							}

							//pt_01 += ' ' + width + ',' + y_01 + ' ' + width + ',' + height;
							pt_05 += ' ' + width + ',' + y_05 + ' ' + width + ',' + height;
							pt_15 += ' ' + width + ',' + y_15 + ' ' + width + ',' + height;

							function convert(val){
								var val;
								if (val >= 1073741824){
									val = (val / 1073741824).toFixed(2)+" GB";
								}
								if (val >= 1048576){
									val = (val / 1048576).toFixed(2)+" MB";
								}
								if (val >= 1024){
									val = (val / 1024).toFixed(2)+" KB";
								}

								return val
							}
						
							//line_01.setAttribute('points', pt_01);
							line_05.setAttribute('points', pt_05);
							line_15.setAttribute('points', pt_15);

							label_25.firstChild.data = (convert(0.25 * data_max));
							label_50.firstChild.data = (convert(0.50 * data_max ));
							label_75.firstChild.data = ( convert(0.75 * data_max));
							
							label_all_sum.innerHTML = (convert(data_all_sum));
							label_rx_sum.innerHTML = (convert(data_rx_sum));
							label_tx_sum.innerHTML = (convert(data_tx_sum));
							
							//label_15_peak.innerHTML = (data_all_sum / 100).toFixed(2);

							/* reset timer */
	// 						window.setTimeout(update_graph, 1000);
						}
	//--------------------------------------------------DAY------------------------------------------------------------------------					
						function day(){
							var data_max   = 0;
							var data_scale = 0;

							var data_01_avg = 0;
							
							var data_all_sum = 0;
							var data_rx_sum = 0;
							var data_tx_sum = 0;
							
							var data_01_peak = 0;
							var data_05_peak = 0;
							
									/* find sizes */
							width       = svg.offsetWidth  - 2;
							height      = svg.offsetHeight - 2;
							step		= width / data.length; //Math.floor(width / data.length) ? Math.floor(width / data.length) : 1;
							data_wanted = data.length; //Math.floor(data.length) <= (width / step) ? Math.floor(data.length) : width ;
							console.log(data.length);
							/* prefill datasets */
							for (var i = 0; i < data_wanted; i++)
							{
								data_01[i] = 0;
								data_05[i] = 0;
								data_15[i] = 0;
								data_time[i]=0;
							}
							console.log("a ", data_05);
							for (var i = 0; i < data.length; i++)
							{
								console.log(i);
								/* skip overlapping entries */
								if (data[i][TIME] <= data_stamp)
									continue;
								//data_01.push(data[i][L01]);
								data_05.push(data[i][L05]);
								data_15.push(data[i][L15]);
								data_time.push(data[i][TIME]);
								
								
							}
							
							console.log("a ", data_05);

							/* cut off outdated entries */
							//data_01 = data_01.slice(data_01.length - data_wanted, data_01.length);
							
							
							
							data_05 = data_05.slice(data_05.length - data_wanted, data_05.length);
							data_15 = data_15.slice(data_15.length - data_wanted, data_15.length);
							data_time = data_time.slice(data_time.length - data_wanted, data_time.length);
							
							console.log("b ", data_05);
							
							/* find peak */
							for (var i = 0; i < data_15.length; i++)
							{
								//data_max = Math.max(data_max, data_01[i]);
								data_max = Math.max(data_max, data_05[i]);
								data_max = Math.max(data_max, data_15[i]);

								//data_01_peak = Math.max(data_01_peak, data_01[i]);
								//data_05_peak = Math.max(data_05_peak, data_05[i]);
								data_all_sum += data_15[i]+data_05[i];

								if (i > 0)
								{
									//data_01_avg = (data_01_avg + data_01[i]) / 2;
									data_rx_sum = (data_rx_sum + data_05[i]);
									data_tx_sum = (data_tx_sum + data_15[i]);
								}
								else
								{
									//data_01_avg = data_01[i];
									data_rx_sum = data_05[i];
									data_tx_sum = data_15[i];
								}
							}

							/* remember current timestamp, calculate horizontal scale */
							data_stamp = data[data.length-1][TIME];
							data_scale = height / (data_max * 1.1);


							/* plot data */
							//var pt_01 = '0,' + height;
							var pt_05 = '0,' + height;
							var pt_15 = '0,' + height;

							//var y_01 = 0;
							var y_05 = 0;
							var y_15 = 0;
							var hour = 0;
							
							
							
							for (var i = 0; i < data_15.length; i++)
							{
								var x = i * step;

								//y_01 = height - Math.floor(data_01[i] * data_scale);
								y_05 = height - Math.floor(data_05[i] * data_scale);
								y_15 = height - Math.floor(data_15[i] * data_scale);

								//pt_01 += ' ' + x + ',' + y_01;
								pt_05 += ' ' + x + ',' + y_05;
								pt_15 += ' ' + x + ',' + y_15;
								
								var time = new Date(data_time[i]*1000);
								var day = time.getHours();
								if (day > hour){ 
									hour = day;
									
								
								var line = G.createElementNS('http://www.w3.org/2000/svg', 'line');
								line.setAttribute('x1', x);
								line.setAttribute('y1', 0);
								line.setAttribute('x2', x);
								line.setAttribute('y2', '100%');
								line.setAttribute('style', 'stroke:black;stroke-width:0.1');

								var text = G.createElementNS('http://www.w3.org/2000/svg', 'text');
								text.setAttribute('x', x + 5);
								text.setAttribute('y', 15);
								text.setAttribute('style', 'fill:#999999; font-size:9pt');
								if (day){
								text.appendChild(G.createTextNode(day + 'h'));
								}
								label_25.parentNode.appendChild(line);
								label_25.parentNode.appendChild(text);
								}
								
								
							}

							//pt_01 += ' ' + width + ',' + y_01 + ' ' + width + ',' + height;
							pt_05 += ' ' + width + ',' + y_05 + ' ' + width + ',' + height;
							pt_15 +=  ' '+ width + ',' + y_15 + ' ' + width + ',' + height;

							function convert(val){
								var val;
								if (val >= 1073741824){
									val = (val / 1073741824).toFixed(2)+" GB";
								}
								if (val >= 1048576){
									val = (val / 1048576).toFixed(2)+" MB";
								}
								if (val >= 1024){
									val = (val / 1024).toFixed(2)+" KB";
								}

								return val
							}
						
							//line_01.setAttribute('points', pt_01);
							line_05.setAttribute('points', pt_05);
							line_15.setAttribute('points', pt_15);

							label_25.firstChild.data = (convert(0.25 * data_max));
							label_50.firstChild.data = (convert(0.50 * data_max ));
							label_75.firstChild.data = ( convert(0.75 * data_max));
							
							label_all_sum.innerHTML = convert(Math.round(data_all_sum).toFixed(2));
							label_rx_sum.innerHTML = (convert(data_rx_sum));
							label_tx_sum.innerHTML = (convert(data_tx_sum));
						}
						
						
						switch(job) {
							case 1:
								month();
								break;
							case 2:
								week();
								break;
							case 3:
								day();
								break;
							default:
								alert("Data limit is not enabled");
								
						}
						
													
					}
				);
				
			}
		}, 1000
	);
	

	function reset_db() {
		if (window.confirm("Are you sure you want to delete all mobile traffic data?\n" +
				"This will reset all services that use it, such as mobile data limit guard.")) {
			XHR.get('<%=build_url("admin/status/usage/delete_all_data", "days", curdev)%>', null,
				function(x, data) {
					if (data[0] == "1") {
						location.reload();
					} else {
						alert('<%=translate("Could not reset database.")%>');
					}
				}
			);
		}
	}

//]]></script>
<%
util   = require "luci.util"
local dual_sim = util.trim(luci.sys.exec("uci get hwinfo.hwinfo.dual_sim"))
%>
<h2><a id="content" name="content"><%=translate("Data Limit Usage")%></a></h2>

<ul class="cbi-tabmenu">
	<li class="cbi-tab<%= "sim1" == curdev and "" or "-disabled" %>"><a href="<%=pcdata("sim1")%>"><%="SIM1"%></a></li>
	<% if dual_sim == "1" then %>
		<li class="cbi-tab<%= "sim2" == curdev and "" or "-disabled" %>"><a href="<%=pcdata("sim2")%>"><%="SIM2"%></a></li>
	<% end %>
</ul>

<embed id="bwsvg" style="width:100%; height:300px; border:1px solid #000000; background-color:#FFFFFF" src="<%=resource%>/load.svg" />
<div style="text-align:right"><strong><a href="#" onclick="reset_db();" style="margin-right:20px; text-decoration:underline;"><%=translate("Delete all data")%></a></strong></div>
<br />

<table style="width:100%; table-layout:fixed" cellspacing="5">
	<tr>
		<td style="text-align:right; vertical-align:top; width: 21%;"><strong onmouseover="ShowHint(this, '<%=translate('The amount of data that has been used this period')%>')" onmouseout="HideHint(this)"><%=translate("Current usage")%> * :</strong></td>
		<td id="lb_all_sum">0</td>

		<td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid #ffaa00" onmouseover="ShowHint(this, '<%=translate('The amount of data that has been sent this period')%>')" onmouseout="HideHint(this)"><%=translate("Sent")%> * :</strong></td>
		<td id="lb_tx_sum">0</td>

		<td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid #ff6600" onmouseover="ShowHint(this, '<%=translate('The amount of data that has been received this period')%>')" onmouseout="HideHint(this)"><%=translate("Received")%> * :</strong></td>
		<td id="lb_rx_sum">0</td>
	</tr>
</table>
<div class="disclaimer_msg">
	<span>* <%=translate("Your carrier\'s data usage accounting may differ. " .. brand(1) .. " is not liable should any accounting discrepancies occur.")%></span>
</div>
<%+footer%>
