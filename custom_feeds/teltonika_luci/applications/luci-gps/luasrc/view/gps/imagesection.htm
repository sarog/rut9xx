<fieldset class="cbi-section" id="cbi-<%=self.config%>-<%=section%>">
	<div class="cbi-value cbi-value-last">
		<label class="cbi-value-title" for="image"><span style="color: rgb(64, 64, 64);" onmouseout="HideHint(this)" onmouseover="ShowHint(this, 'Get current router coordinates')" <="" span="">Get current coordinates</span></label>
		<div class="cbi-value-field">
			<input class="cbi-button cbi-button-apply1" name="get" value="Get" type="button" onclick="get_cord()" />
		</div>
	</div>

	<div class="cbi-section-descr"><%=self.description%></div>
	<div class="cbi-section-node" style="padding: 0px 0px 20px 120px;">
		<div id="Map" style="height:350px; width:600px;float:left;border: solid #e5e5e5;"></div>
	</div>
	<div class="disclaimer_msg" style="display:inline-block;width:100%"><br>
		<span>* To receive SMS or email when entering or leaving geofence zone, go to Events reporting page and configure GPS event type.</span><br>
		<span>* Geofencing circle shown in map is for a reference and it might not represent real coordinates.</span>
	</div>
</fieldset>

<script src="/luci-static/default/OpenLayers.js"></script>
<script type="text/javascript">
	var zoom = 16;
	var fromProjection = new OpenLayers.Projection("EPSG:4326");	// Transform from WGS 1984
	var toProjection = new OpenLayers.Projection("EPSG:900913");	// to Spherical Mercator Projection
	var mapnik = new OpenLayers.Layer.OSM();

	map = new OpenLayers.Map("Map");

	map.addLayer(mapnik);
	map.addControl(new OpenLayers.Control.PanZoomBar());

	vector = new OpenLayers.Layer.Vector("Circles", {
		styleMap: new OpenLayers.StyleMap({
			'default': new OpenLayers.Style(null, {
				rules: [
					new OpenLayers.Rule({
						symbolizer: {
							stroke: true,
							fill: true,
							label: "<%=section%>"
						},
						filter: new OpenLayers.Filter.Comparison({
							type: "==",
							property: "topic",
							value: "geofence_zone"
						})
					}),
				]
			})
		})
	});
	map.addLayer(vector);

	var radlat = (Number(document.getElementById("cbid.gps.<%=section%>.latitude").value) * Math.PI / 180);
	var radius = ((1- Math.pow(0.081, 2)) * (1 / Math.cos(radlat))) / (1 - (Math.pow(0.081, 2) * Math.pow(Math.sin(radlat), 2)));

	var circle_point = new OpenLayers.Geometry.Point(document.getElementById("cbid.gps.<%=section%>.longitude").value, document.getElementById("cbid.gps.<%=section%>.latitude").value).transform(fromProjection, toProjection);
	var mycircle = OpenLayers.Geometry.Polygon.createRegularPolygon(circle_point, radius * Number(document.getElementById("cbid.gps.<%=section%>.radius").value), 40, 0);
	var featurecircle = new OpenLayers.Feature.Vector(mycircle);
	featurecircle.attributes = {
		topic: "geofence_zone"
	};

	vector.addFeatures(featurecircle);

	if (document.getElementById("cbid.gps.<%=section%>.longitude").value && document.getElementById("cbid.gps.<%=section%>.latitude").value) {
		position = new OpenLayers
			.LonLat(
				document.getElementById("cbid.gps.<%=section%>.longitude").value,
				document.getElementById("cbid.gps.<%=section%>.latitude").value
			).transform(
			fromProjection,
			toProjection
		);

		map.setCenter(position, zoom);
	}

	function get_cord()
	{
		XHR.get('<%=luci.dispatcher.build_url("admin", "services", "gps", "get_geofence")%>', { status: 1, section: "<%=section%>", },
			function(x, info){
				if (info){
					document.getElementById("cbid.gps.<%=section%>.longitude").value = info.longitude;
					document.getElementById("cbid.gps.<%=section%>.latitude").value = info.latitude;
				}else{
					document.getElementById("cbid.gps.<%=section%>.longitude").value = "0.000000";
					document.getElementById("cbid.gps.<%=section%>.latitude").value = "0.000000";
				}
				vector.destroyFeatures(featurecircle);

				vector = new OpenLayers.Layer.Vector("Circles", {
					styleMap: new OpenLayers.StyleMap({
						'default': new OpenLayers.Style(null, {
							rules: [
								new OpenLayers.Rule({
									symbolizer: {
										stroke: true,
										fill: true,
										label: "<%=section%>"
									},
									filter: new OpenLayers.Filter.Comparison({
										type: "==",
										property: "topic",
										value: "geofence_zone"
									})
								}),
							]
						})
					})
				});
				map.addLayer(vector);

				radlat = (Number(document.getElementById("cbid.gps.<%=section%>.latitude").value) * Math.PI / 180);
				radius = ((1- Math.pow(0.081, 2)) * (1 / Math.cos(radlat))) / (1 - (Math.pow(0.081, 2) * Math.pow(Math.sin(radlat), 2)));

				var circle_point = new OpenLayers.Geometry.Point(document.getElementById("cbid.gps.<%=section%>.longitude").value, document.getElementById("cbid.gps.<%=section%>.latitude").value).transform(fromProjection, toProjection);
				var mycircle = OpenLayers.Geometry.Polygon.createRegularPolygon(circle_point, radius * Number(document.getElementById("cbid.gps.<%=section%>.radius").value), 40, 0);
				featurecircle = new OpenLayers.Feature.Vector(mycircle);
				featurecircle.attributes = {
					topic: "geofence_zone"
				};

				vector.addFeatures(featurecircle);

				if (document.getElementById("cbid.gps.<%=section%>.longitude").value && document.getElementById("cbid.gps.<%=section%>.latitude").value) {
					position = new OpenLayers
						.LonLat(
							document.getElementById("cbid.gps.<%=section%>.longitude").value,
							document.getElementById("cbid.gps.<%=section%>.latitude").value
						).transform(
						fromProjection,
						toProjection
					);

					map.setCenter(position, zoom);
				}
			}
		);
	}
</script>
