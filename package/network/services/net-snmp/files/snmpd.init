#!/bin/sh /etc/rc.common
# Copyright (C) 2008 OpenWrt.org
START=99

USE_PROCD=1
PROG="/usr/sbin/snmpd"

CONFIGFILE="/var/run/snmpd.conf"
OUTCONFIG="/usr/lib/snmp/snmpd.conf"
MODULESPATH="/usr/lib/snmpd-mod"

ENABLED=0
V1=
V2C=
V3=

_config_write() {
    [ -n "$1" ] || return 0

    echo "$1" >> $CONFIGFILE
}

boot() {
    start "$@"
}

service_triggers()
{
        procd_add_reload_trigger "snmpd"
}

snmpd_load_modules() {
    for module in $(ls $MODULESPATH 2>/dev/null); do
        _config_write "dlmod ${module%.*} $MODULESPATH/$module"
    done
}

snmpd_agentaddress_add() {
	local family=$1 proto=$2 port=$3

	case $family in
		ipv4)
			echo "agentaddress ${proto}:${port}" >> $CONFIGFILE
			;;
		ipv6)
			echo "agentaddress ${proto}6:${port}" >> $CONFIGFILE
			;;
		*)
			echo "agentaddress ${proto}6:${port}" >> $CONFIGFILE
			echo "agentaddress ${proto}:${port}" >> $CONFIGFILE
			;;
	esac
}

snmpd_agent_add() {
	local cfg="$1"
	local proto

    config_get ENABLED "$cfg" enabled 0
    [ $ENABLED -ne 1 ] && return 0
    
	config_get proto "$cfg" proto "UDP"
	config_get ipfamily "$cfg" ipfamily "ipv4"
	config_get port "$cfg" port "161"
	config_get V1 "$cfg" v1mode 0
	config_get V2C "$cfg" v2cmode 0
	config_get V3 "$cfg" v3mode 0
	
	snmpd_agentaddress_add "$ipfamily" "$proto" "$port"
}

snmpd_system_add() {
	local cfg="$1"
	config_get syslocation "$cfg" sysLocation
	[ -n "$syslocation" ] && echo "sysLocation $syslocation" >> $CONFIGFILE
	config_get syscontact "$cfg" sysContact
	[ -n "$syscontact" ] && echo "sysContact $syscontact" >> $CONFIGFILE
	config_get sysname "$cfg" sysName
	[ -n "$sysname" ] && echo "sysName $sysname" >> $CONFIGFILE
	config_get sysservice "$cfg" sysService
	[ -n "$sysservice" ] && echo "sysService $sysservice" >> $CONFIGFILE
	config_get sysdescr "$cfg" sysDescr
	[ -n "$sysdescr" ] && echo "sysDescr $sysdescr" >> $CONFIGFILE
	config_get sysobjectid "$cfg" sysObjectID
	[ -n "$sysobjectid" ] && echo "sysObjectID $sysobjectid" >> $CONFIGFILE
}

snmpd_com2sec_add() {
	local cfg="$1"
	local ipaddr netmask
	config_get secname "$cfg" secname
	[ -n "$secname" ] || return 0
	config_get ipaddr "$cfg" ipaddr
	[ -n "$ipaddr" ] || return 0
	config_get netmask "$cfg" netmask
	[ -n "$netmask" ] || return 0
	config_get community "$cfg" community
	[ -n "$community" ] || return 0
	echo "com2sec $secname $ipaddr/$netmask $community" >> $CONFIGFILE
}

snmpd_com2sec6_add() {
	local cfg="$1"
	config_get secname "$cfg" secname
	[ -n "$secname" ] || return 0
	config_get source "$cfg" source
	[ -n "$source" ] || return 0
	config_get community "$cfg" community
	[ -n "$community" ] || return 0
	echo "com2sec6 $secname $source $community" >> $CONFIGFILE
}

snmpd_group_add() {
	local cfg="$1"
	config_get group "$cfg" group
	[ -n "$group" ] || return 0
	config_get version "$cfg" version
	[ -n "$version" ] || return 0
	config_get secname "$cfg" secname
	[ -n "$secname" ] || return 0
    [ "$version" == "v1" -a "$V1" != "1" ] && return 0
    [ "$version" == "v2c" -a "$V2C" != "1" ] && return 0

	echo "group $group $version $secname" >> $CONFIGFILE
}

snmpd_view_add() {
	local cfg="$1"
	config_get viewname "$cfg" viewname
	[ -n "$viewname" ] || return 0
	config_get type "$cfg" type
	[ -n "$type" ] || return 0
	config_get oid "$cfg" oid
	[ -n "$oid" ] || return 0
	# optional mask
	config_get mask "$cfg" mask
	echo "view $viewname $type $oid $mask" >> $CONFIGFILE
}

snmpd_access_add() {
	local cfg="$1"
	config_get group "$cfg" group
	[ -n "$group" ] || return 0
	config_get context "$cfg" context
	[ -n "$context" ] || return 0
	[ "$context" == "none" ] && context='""'
	config_get version "$cfg" version
	[ -n "$version" ] || return 0
	config_get level "$cfg" level
	[ -n "$level" ] || return 0
	config_get prefix "$cfg" prefix
	[ -n "$prefix" ] || return 0
	config_get read "$cfg" read
	[ -n "$read" ] || return 0
	config_get write "$cfg" write
	[ -n "$write" ] || return 0
	config_get notify "$cfg" notify
	[ -n "$notify" ] || return 0
	echo "access $group $context $version $level $prefix $read $write $notify" >> $CONFIGFILE
}

snmpd_pass_add() {
	local cfg="$1"
	local pass='pass'

	config_get miboid "$cfg" miboid
	[ -n "$miboid" ] || return 0
	config_get prog "$cfg" prog
	[ -n "$prog" ] || return 0
	config_get_bool persist "$cfg" persist 0
	[ $persist -ne 0 ] && pass='pass_persist'
	config_get priority "$cfg" priority
	priority=${priority:+-p $priority}
	echo "$pass $priority $miboid $prog" >> $CONFIGFILE
}

snmpd_exec_add() {
	local cfg="$1"

	config_get name "$cfg" name
	[ -n "$name" ] || return 0
	config_get prog "$cfg" prog
	[ -n "$prog" ] || return 0
	config_get args "$cfg" args
	config_get miboid "$cfg" miboid
	echo "exec $miboid $name $prog $args" >> $CONFIGFILE
}

snmpd_extend_add() {
	local cfg="$1"

	config_get name "$cfg" name
	[ -n "$name" ] || return 0
	config_get prog "$cfg" prog
	[ -n "$prog" ] || return 0
	config_get args "$cfg" args
	config_get miboid "$cfg" miboid
	echo "extend $miboid $name $prog $args" >> $CONFIGFILE
}

snmpd_disk_add() {
        local cfg="$1"
        local disk='disk'

        config_get partition "$cfg" partition
        [ -n "$partition" ] || return 0
        config_get size "$cfg" size
        [ -n "$size" ] || return 0
        echo "$disk $partition $size" >> $CONFIGFILE
}

snmpd_user_add() {
	local cfg="$1"
	local enabled rights username mibaccess seclevel

	config_get enabled "$cfg" enabled 0
	[ $enabled -ne 1 ] && return 0
	config_get username "$cfg" username
	[ -n "$username" ] || return 0
	config_get mibaccess "$cfg" mibaccess
	config_get seclevel "$cfg" seclevel "noauth"
	config_get rights "$cfg" rights "ro"
	[ "$rights" == "rw" ] && rights="rw" || rights="ro"

    case $seclevel in
        noauth)
            _config_write "createUser $username"
            ;;
        auth)
            config_get authtype "$cfg" authtype
            [ -n "$authtype" ] || return 0
            config_get authpass "$cfg" authpass
            [ -n "$authpass" ] || return 0

            _config_write "createUser $username $authtype \"$authpass\""
            ;;
        priv)
            config_get authtype "$cfg" authtype
            [ -n "$authtype" ] || return 0
            config_get authpass "$cfg" authpass
            [ -n "$authpass" ] || return 0
            config_get privtype "$cfg" privtype
            [ -n "$privtype" ] || return 0
            config_get privpass "$cfg" privpass
            [ -n "$privpass" ] || return 0

            _config_write "createUser $username $authtype \"$authpass\" $privtype \"$privpass\""
            ;;
    esac

	echo "${rights}user $username $seclevel ${mibaccess}" >> $CONFIGFILE
}

snmpd_trap2sink_add(){
    local cfg="$1"
    local enabled host port community

    config_get enabled "$cfg" enabled 0
    [ $enabled -ne 1 ] && return 0
    config_get host "$cfg" host 0
    [ -n "$host" ] || return 0
    config_get port "$cfg" port 0
    config_get community "$cfg" community 0
    [ -n "$community" ] || return 0

    _config_write "trap2sink $host${port:+:$port} $community"
}

snmpd_trap_add(){
     local cfg="$1"
    local enabled type param state

    config_get enabled "$cfg" enabled 0
    [ $enabled -ne 1 ] && return 0
    config_get type "$cfg" type 0
    [ -n "$type" ] || return 0
    config_get io_name "$cfg" io_name 0
    [ -n "$io_name" ] || return 0
    config_get io_type "$cfg" io_type 0
    [ -n "$io_type" ] || return 0

    case $type in
    signalstrtrap)
        config_get param "$cfg" signal
        [ -n "$param" ] || return 0
        ;;
    iotrap)
        config_get state "$cfg" state
        config_get voltage "$cfg" voltage
	if [ -n "$state" ]; then
		param="${io_name} ${io_type} ${state}"
	elif [ -n "$voltage" ]; then
		param="${io_name} ${io_type} ${voltage}"
	else
		return 0
	fi
        ;;
    *)
        param=1
        ;;
    esac

    _config_write "$type ${param:+$param}"
}

start_service() {
	[ -f "$CONFIGFILE" ] && rm -f "$CONFIGFILE"
	[ -f "$OUTCONFIG" ] && rm -f "$OUTCONFIG"
    config_load snmpd
    
    config_foreach snmpd_agent_add agent

    [ "$ENABLED" -ne "1" ] && return 0

    logger "start_service snmpd"
	config_foreach snmpd_system_add system
	[ $V1 -eq 1 -o $V2C -eq 1 ] && {
	    config_foreach snmpd_com2sec_add com2sec
	    config_foreach snmpd_com2sec6_add com2sec6
	    config_foreach snmpd_group_add group
	    config_foreach snmpd_view_add view
        config_foreach snmpd_access_add access
	}

	config_foreach snmpd_pass_add pass
	config_foreach snmpd_exec_add exec
	config_foreach snmpd_disk_add disk
	[ $V3 -eq 1 ] && config_foreach snmpd_user_add user
	snmpd_load_modules
	config_foreach snmpd_trap2sink_add trap2sink
	config_foreach snmpd_trap_add trap

    procd_open_instance
	procd_set_param command $PROG -Lf /dev/null -f -r
	#Permit caching configuration
	procd_append_param command -Cc $CONFIGFILE
	procd_append_param command --noPersistentSave=1 --noPersistentLoad=1
	procd_set_param file /etc/config/snmpd
	procd_set_param respawn

	for iface in $(ls /sys/class/net 2>/dev/null); do
		procd_append_param netdev "$iface"
	done

	procd_close_instance
}

stop_service() {
	[ -f "$CONFIGFILE" ] && rm -f "$CONFIGFILE"
	[ -f "$OUTCONFIG" ] && rm -f "$OUTCONFIG"
}
