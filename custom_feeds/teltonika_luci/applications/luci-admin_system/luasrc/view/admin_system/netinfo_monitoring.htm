<%#
LuCI - Lua Configuration Interface
Copyright 2008 Steven Barth <steven@midlink.org>
Copyright 2008-2011 Jo-Philipp Wich <xm@subsignal.org>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

$Id: index.htm 8408 2012-04-02 22:50:26Z jow $

-%>

<%
	local sys = require "luci.sys"
	luci.util = require "luci.util"
%>

<%+header%>

<fieldset class="cbi-section">
	<div id="monitoringBarsShow" class="overlayParent">
		<div class="overlayLegend"><%=translate("Status")%></div>
	</div>
	<div id="monitoring_status">
        <table id="monitoring_status_table" width="100%" cellspacing="10" class="cbi-section-table">
            <tr id="connection-type-row">
                <td width="33%"><%=translate("Management status")%></td>
                <td id="connection-type">Checking...</td>
            </tr>
            <tr>
                <td width="33%"><%=translate("Serial number")%></td>
                <td id="serial-number">Checking...</td>
            </tr>
            <tr id="mac-row">
                <td width="33%"><%=translate("Lan MAC")%></td>
                <td id="mac">Checking...</td>
            </tr>
		</table>
	</div>
</fieldset>
<fieldset class="cbi-section">
    <button id="force-connect" type="button" class="cbi-button-refresh"
            style="float: right; margin-left: 10px;background-image: url(''), -moz-linear-gradient(top, #e2e2e2, #a4a4a4) !important;padding: 4px 20px 3px 20px !important"
            disabled onClick="refreshPage(2)"><%=translate("Connect")%>
    </button>
    <button id="refresh" type="button" class="cbi-button-refresh" style="float: right;" disabled
            onClick="refreshPage(1)"><%=translate("Refresh Information")%>
    </button>
</fieldset>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/javascript">
    function refreshPage(action) {
        if (action === undefined)
            action = 1;

        var connectionEnabled = "";
        var hostname = "";
        var port = "";
        var connectionTable = document.getElementById("monitoring_status_table");
        var connectionType = document.getElementById('connection-type');
        var connectionState = document.getElementById('connection-state');
        var nextConnection = document.getElementById('next-connection');
        var serialText = document.getElementById('serial-number');
        var macText = document.getElementById('mac');
        var nextConnectionRow = document.getElementById("next-connection-row");
        var connectionStateRow = document.getElementById("connection-state-row");
        var refreshButton = document.getElementById("refresh");
        var forceConnectButton = document.getElementById("force-connect");

        if (action !== 3 && action !== 4) {
            refreshButton.disabled = true;
            forceConnectButton.disabled = true;
            connectionType.innerText = "Checking...";
            if (connectionStateRow != null)
                connectionState.innerText = "Checking...";
            if (nextConnectionRow != null)
                nextConnection.innerText = "Checking...";
        }
        else if (action === 3 && connectionType.innerText === "Checking...") {
            setTimeout(function () {
                refreshPage(3);
            }, 2000);
            return;
        }

        if (action === 2) {
            connectionEnabled = document.getElementById("cbid.rms_connect_mqtt.rms_connect_mqtt.enable").value;
            hostname = document.getElementById("cbid.rms_connect_mqtt.rms_connect_mqtt.remote").value;
            port = document.getElementById("cbid.rms_connect_mqtt.rms_connect_mqtt.port").value;
        }

        XHR.get('<%=luci.dispatcher.build_url("admin", "system", "admin", "xhr_the_data")%>', {
                status: action === 3 || action === 4 ? 1 : action,
                conn_type: connectionEnabled,
                hostname: hostname,
                port: port
            },
            function (x, info) {
                if (x && x.status === 403)
                    location.href = location.href;

                if (info === null) {
                    if (action === 1 || action === 2)
                        refreshPage(action);
                    else {
                        setTimeout(function () {
                            refreshPage(3);
                        }, 2000);
                    }
                    return;
                }
                if (action === 3 && connectionType.innerText === "Checking...") {
                    setTimeout(function () {
                        refreshPage(3);
                    }, 2000);
                    return;
                }
                if (info.status === "0") {
                    connectionType.innerHTML = "Disabled";
                    if (nextConnectionRow != null)
                        nextConnectionRow.parentElement.removeChild(nextConnectionRow);
                    if (connectionStateRow != null)
                        connectionStateRow.parentElement.removeChild(connectionStateRow);
                }
                else {
                    if (nextConnectionRow == null) {
                        nextConnectionRow = connectionTable.insertRow();
                        nextConnectionRow.id = "next-connection-row";
                        var name1 = nextConnectionRow.insertCell(0);
                        name1.style.width = "33%";
                        name1.innerHTML = "<%=translate("Next connection after")%>";
                        nextConnection = nextConnectionRow.insertCell(1);
                        nextConnection.id = "next-connection";
                    }
                    if (connectionStateRow == null) {
                        connectionStateRow = connectionTable.insertRow(1);
                        connectionStateRow.id = "connection-state-row";
                        var name2 = connectionStateRow.insertCell(0);
                        name2.style.width = "33%";
                        name2.innerHTML = "<%=translate("Connection State")%>";
                        connectionState = connectionStateRow.insertCell(1);
                        connectionState.id = "connection-state";
                    }
                    connectionState.innerHTML = info.connection_state;
                    connectionType.innerHTML = "Enabled";

                    if (info.is_connected === "0" && info.next_try !== "-1")
                        nextConnection.innerHTML = info.next_try;
                    else if (nextConnectionRow != null)
                        nextConnectionRow.parentElement.removeChild(nextConnectionRow);
                }
                if (action !== 3) {
                    serialText.innerHTML = info.serial_nbr;
                    macText.innerHTML = info.lan_mac;
                    refreshButton.disabled = false;
                }

                if (info.is_connected === "0") {
                    forceConnectButton.disabled = false;
                    forceConnectButton.innerText = "Connect";
                }
                else {
                    forceConnectButton.disabled = true;
                    forceConnectButton.innerText = "Connected";
                }

                if (action === 3 || action === 4) {
                    setTimeout(function () {
                        refreshPage(3);
                    }, 2000);
                }
            }
        );
    }

    function warningMessage(){
        var enabled = parseInt(document.getElementById("cbid.rms_connect_mqtt.rms_connect_mqtt.enable").value);
        var div = document.getElementById("hidden_message");
        if (enabled === 1 || enabled === 2) {
            div.className = "" ;
            div.style.display = "none";
            div.innerHTML = "";
        } else {
            div.className = "alert-message warning" ;
            div.style.display = "";
            div.innerHTML = "RMS must be set to Enabled or Standby in order to use Remote Management System.<br><b>Warning</b>: physical access to router's web interface will be necessary to enable the functionality later.";
        }
    }

    function startRefresh() {
        refreshPage(4);
    }

    AddWindowOnLoadEvent(startRefresh);
    AddWindowOnLoadEvent(warningMessage);
</script>
