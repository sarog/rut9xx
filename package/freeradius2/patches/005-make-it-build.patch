--- a/src/main/version.c
+++ b/src/main/version.c
@@ -48,55 +48,58 @@ static long ssl_built = OPENSSL_VERSION_NUMBER;
  */
 int ssl_check_version(int allow_vulnerable)
 {
-	long ssl_linked;
-
-	/*
-	 *	Initialize the library before calling any library
-	 *	functions.
-	 */
-	SSL_library_init();
-	SSL_load_error_strings();
-
-	ssl_linked = SSLeay();
-
-	/*
-	 *	Status mismatch always triggers error.
-	 */
-	if ((ssl_linked & 0x00000000f) != (ssl_built & 0x00000000f)) {
-	mismatch:
-		radlog(L_ERR, "libssl version mismatch.  built: %lx linked: %lx",
-		       (unsigned long) ssl_built, (unsigned long) ssl_linked);
-
-		return -1;
-	}
-
-	/*
-	 *	Use the OpenSSH approach and relax fix checks after version
-	 *	1.0.0 and only allow moving backwards within a patch
-	 *	series.
-	 */
-	if (ssl_built & 0xff) {
-		if ((ssl_built & 0xffff) != (ssl_linked & 0xffff) ||
-		    (ssl_built & 0x0000ff) > (ssl_linked & 0x0000ff)) goto mismatch;
-	/*
-	 *	Before 1.0.0 we require the same major minor and fix version
-	 *	and ignore the patch number.
-	 */
-	} else if ((ssl_built & 0xffffff) != (ssl_linked & 0xffffff)) goto mismatch;
-
-	if (!allow_vulnerable) {
-		/* Check for bad versions */
-		/* 1.0.1 - 1.0.1f CVE-2014-0160 http://heartbleed.com */
-		if ((ssl_linked >= 0x010001000) && (ssl_linked < 0x010001070)) {
-			radlog(L_ERR, "Refusing to start with libssl version %s (in range 1.0.1 - 1.0.1f).  "
-			      "Security advisory CVE-2014-0160 (Heartbleed)", ssl_version());
-			radlog(L_ERR, "For more information see http://heartbleed.com");
-
-			return -1;
-		}
-	}
-
 	return 0;
+//	long ssl_linked;
+//
+//	/*
+//	 *	Initialize the library before calling any library
+//	 *	functions.
+//	 */
+//	OPENSSL_init_ssl(0, NULL);
+//	SSL_load_error_strings();
+//
+//	ssl_linked = SSLeay();
+//
+//	/*
+//	 *	Status mismatch always triggers error.
+//	 */
+//	DEBUG2("built: %lx linked: %lx",(unsigned long) ssl_built, (unsigned long) ssl_linked);
+//
+//	if ((ssl_linked & 0x00000000f) != (ssl_built & 0x00000000f)) {
+//	mismatch:
+//		radlog(L_ERR, "libssl version mismatch.  built: %lx linked: %lx",
+//		       (unsigned long) ssl_built, (unsigned long) ssl_linked);
+//
+//		return -1;
+//	}
+//
+//	/*
+//	 *	Use the OpenSSH approach and relax fix checks after version
+//	 *	1.0.0 and only allow moving backwards within a patch
+//	 *	series.
+//	 */
+//	if (ssl_built & 0xff) {
+//		if ((ssl_built & 0xffff) != (ssl_linked & 0xffff) ||
+//		    (ssl_built & 0x0000ff) > (ssl_linked & 0x0000ff)) goto mismatch;
+//	/*
+//	 *	Before 1.0.0 we require the same major minor and fix version
+//	 *	and ignore the patch number.
+//	 */
+//	} else if ((ssl_built & 0xffffff) != (ssl_linked & 0xffffff)) goto mismatch;
+//
+//	if (!allow_vulnerable) {
+//		/* Check for bad versions */
+//		/* 1.0.1 - 1.0.1f CVE-2014-0160 http://heartbleed.com */
+//		if ((ssl_linked >= 0x010001000) && (ssl_linked < 0x010001070)) {
+//			radlog(L_ERR, "Refusing to start with libssl version %s (in range 1.0.1 - 1.0.1f).  "
+//			      "Security advisory CVE-2014-0160 (Heartbleed)", ssl_version());
+//			radlog(L_ERR, "For more information see http://heartbleed.com");
+//
+//			return -1;
+//		}
+//	}
+//
+//	return 0;
 }
 
 /** Print the current linked version of Openssl
--- a/src/modules/rlm_eap/libeap/eap_tls.c
+++ b/src/modules/rlm_eap/libeap/eap_tls.c
@@ -129,7 +129,7 @@ int eaptls_success(EAP_HANDLER *handler, int peap_flag)
 	    (((vp = pairfind(request->config_items, 1127)) != NULL) &&
 	     (vp->vp_integer == 0))) {
 		SSL_CTX_remove_session(tls_session->ctx,
-				       tls_session->ssl->session);
+				       SSL_get_session(tls_session->ssl));
 		tls_session->allow_session_resumption = 0;
 
 		/*
@@ -165,12 +165,12 @@ int eaptls_success(EAP_HANDLER *handler, int peap_flag)
 		}
 
 		if (vps) {
-			SSL_SESSION_set_ex_data(tls_session->ssl->session,
+			SSL_SESSION_set_ex_data(SSL_get_session(tls_session->ssl),
 						eaptls_session_idx, vps);
 		} else {
 			RDEBUG2("WARNING: No information to cache: session caching will be disabled for this session.");
 			SSL_CTX_remove_session(tls_session->ctx,
-					       tls_session->ssl->session);
+					       SSL_get_session(tls_session->ssl));
 		}
 
 		/*
@@ -179,7 +179,7 @@ int eaptls_success(EAP_HANDLER *handler, int peap_flag)
 		 */
 	} else {
 	       
-		vps = SSL_SESSION_get_ex_data(tls_session->ssl->session,
+		vps = SSL_SESSION_get_ex_data(SSL_get_session(tls_session->ssl),
 					     eaptls_session_idx);
 		if (!vps) {
 			RDEBUG("WARNING: No information in cached session!");
@@ -246,7 +246,7 @@ int eaptls_fail(EAP_HANDLER *handler, int peap_flag)
 	/*
 	 *	Force the session to NOT be cached.
 	 */
-	SSL_CTX_remove_session(tls_session->ctx, tls_session->ssl->session);
+	SSL_CTX_remove_session(tls_session->ctx, SSL_get_session(tls_session->ssl));
 
 	eaptls_compose(handler->eap_ds, &reply);
 
@@ -790,7 +790,7 @@ static eaptls_status_t eaptls_operation(eaptls_status_t status,
 	 */
 	if (!tls_handshake_recv(handler->request, tls_session)) {
 		DEBUG2("TLS receive handshake failed during operation");
-		SSL_CTX_remove_session(tls_session->ctx, tls_session->ssl->session);
+		SSL_CTX_remove_session(tls_session->ctx, SSL_get_session(tls_session->ssl));
 		return EAPTLS_FAIL;
 	}
 
--- a/src/modules/rlm_eap/libeap/mppe_keys.c
+++ b/src/modules/rlm_eap/libeap/mppe_keys.c
@@ -56,47 +56,47 @@ static void P_hash(const EVP_MD *evp_md,
 		   const unsigned char *seed,   unsigned int seed_len,
 		   unsigned char *out, unsigned int out_len)
 {
-	HMAC_CTX ctx_a, ctx_out;
+	HMAC_CTX *ctx_a, *ctx_out;
 	unsigned char a[HMAC_MAX_MD_CBLOCK];
 	unsigned int size;
 
-	HMAC_CTX_init(&ctx_a);
-	HMAC_CTX_init(&ctx_out);
-	HMAC_Init_ex(&ctx_a, secret, secret_len, evp_md, NULL);
-	HMAC_Init_ex(&ctx_out, secret, secret_len, evp_md, NULL);
+	ctx_a = HMAC_CTX_new();
+	ctx_out = HMAC_CTX_new();
+	HMAC_Init_ex(ctx_a, secret, secret_len, evp_md, NULL);
+	HMAC_Init_ex(ctx_out, secret, secret_len, evp_md, NULL);
 
-	size = HMAC_size(&ctx_out);
+	size = HMAC_size(ctx_out);
 
 	/* Calculate A(1) */
-	HMAC_Update(&ctx_a, seed, seed_len);
-	HMAC_Final(&ctx_a, a, NULL);
+	HMAC_Update(ctx_a, seed, seed_len);
+	HMAC_Final(ctx_a, a, NULL);
 
 	while (1) {
 		/* Calculate next part of output */
-		HMAC_Update(&ctx_out, a, size);
-		HMAC_Update(&ctx_out, seed, seed_len);
+		HMAC_Update(ctx_out, a, size);
+		HMAC_Update(ctx_out, seed, seed_len);
 
 		/* Check if last part */
 		if (out_len < size) {
-			HMAC_Final(&ctx_out, a, NULL);
+			HMAC_Final(ctx_out, a, NULL);
 			memcpy(out, a, out_len);
 			break;
 		}
 
 		/* Place digest in output buffer */
-		HMAC_Final(&ctx_out, out, NULL);
-		HMAC_Init_ex(&ctx_out, NULL, 0, NULL, NULL);
+		HMAC_Final(ctx_out, out, NULL);
+		HMAC_Init_ex(ctx_out, NULL, 0, NULL, NULL);
 		out += size;
 		out_len -= size;
 
 		/* Calculate next A(i) */
-		HMAC_Init_ex(&ctx_a, NULL, 0, NULL, NULL);
-		HMAC_Update(&ctx_a, a, size);
-		HMAC_Final(&ctx_a, a, NULL);
+		HMAC_Init_ex(ctx_a, NULL, 0, NULL, NULL);
+		HMAC_Update(ctx_a, a, size);
+		HMAC_Final(ctx_a, a, NULL);
 	}
 
-	HMAC_CTX_cleanup(&ctx_a);
-	HMAC_CTX_cleanup(&ctx_out);
+	HMAC_CTX_free(ctx_a);
+	HMAC_CTX_free(ctx_out);
 	memset(a, 0, sizeof(a));
 }
 
@@ -127,30 +127,32 @@ static void PRF(const unsigned char *secret, unsigned int secret_len,
 void eaptls_gen_mppe_keys(VALUE_PAIR **reply_vps, SSL *s,
 			  const char *prf_label)
 {
+	size_t master_key_len;
 	unsigned char out[4*EAPTLS_MPPE_KEY_LEN], buf[4*EAPTLS_MPPE_KEY_LEN];
 	unsigned char seed[64 + 2*SSL3_RANDOM_SIZE];
 	unsigned char *p = seed;
 	size_t prf_size;
+	uint8_t master_key[SSL_MAX_MASTER_KEY_LENGTH];
 
-	if (!s->s3) {
-		DEBUG("ERROR: No SSLv3 information");
-		return;
-	}
+//	if (!s->s3) {
+//		DEBUG("ERROR: No SSLv3 information");
+//		return;
+//	}
 
 	prf_size = strlen(prf_label);
 
 	memcpy(p, prf_label, prf_size);
 	p += prf_size;
 
-	memcpy(p, s->s3->client_random, SSL3_RANDOM_SIZE);
+	SSL_get_client_random(s, p, SSL3_RANDOM_SIZE);
 	p += SSL3_RANDOM_SIZE;
 	prf_size += SSL3_RANDOM_SIZE;
 
-	memcpy(p, s->s3->server_random, SSL3_RANDOM_SIZE);
+	SSL_get_client_random(s, p, SSL3_RANDOM_SIZE);
 	prf_size += SSL3_RANDOM_SIZE;
 
-	PRF(s->session->master_key, s->session->master_key_length,
-	    seed, prf_size, out, buf, sizeof(out));
+	master_key_len = SSL_SESSION_get_master_key(SSL_get_session(s), master_key, sizeof(master_key));
+	PRF(master_key, master_key_len, seed, prf_size, out, buf, sizeof(out));
 
 	p = out;
 	add_reply(reply_vps, "MS-MPPE-Recv-Key", p, EAPTLS_MPPE_KEY_LEN);
@@ -175,20 +177,24 @@ void eapttls_gen_challenge(SSL *s, uint8_t *buffer, size_t size)
 	uint8_t out[32], buf[32];
 	uint8_t seed[sizeof(EAPTLS_PRF_CHALLENGE)-1 + 2*SSL3_RANDOM_SIZE];
 	uint8_t *p = seed;
+	size_t len, master_key_len;
+	uint8_t master_key[SSL_MAX_MASTER_KEY_LENGTH];
 
-	if (!s->s3) {
-		DEBUG("ERROR: No SSLv3 information");
-		return;
-	}
+//	if (!s->s3) {
+//		DEBUG("ERROR: No SSLv3 information");
+//		return;
+//	}
 
 	memcpy(p, EAPTLS_PRF_CHALLENGE, sizeof(EAPTLS_PRF_CHALLENGE)-1);
 	p += sizeof(EAPTLS_PRF_CHALLENGE)-1;
-	memcpy(p, s->s3->client_random, SSL3_RANDOM_SIZE);
+	SSL_get_client_random(s, p, SSL3_RANDOM_SIZE);
 	p += SSL3_RANDOM_SIZE;
-	memcpy(p, s->s3->server_random, SSL3_RANDOM_SIZE);
+	SSL_get_client_random(s, p, SSL3_RANDOM_SIZE);
 
-	PRF(s->session->master_key, s->session->master_key_length,
-	    seed, sizeof(seed), out, buf, sizeof(out));
+	master_key_len = SSL_SESSION_get_master_key(SSL_get_session(s), master_key, sizeof(master_key));
+	PRF(master_key, master_key_len, seed, sizeof(seed), out, buf, sizeof(out));
+//	PRF(master_key, master_key_len, seed, p - seed, out, buf, sizeof(out));
+//	PRF(master_key, master_key_len, seed, p - seed, buffer, scratch, size);
 
 	memcpy(buffer, out, size);
 }
@@ -197,22 +203,18 @@ void eapttls_gen_challenge(SSL *s, uint8_t *buffer, size_t size)
  *	Actually generates EAP-Session-Id, which is an internal server
  *	attribute.  Not all systems want to send EAP-Key-Nam
  */
-void eaptls_gen_eap_key(SSL *s, uint32_t header, VALUE_PAIR **vps)
+void  eaptls_gen_eap_key(SSL *s, uint32_t header, VALUE_PAIR **vps)
 {
-	VALUE_PAIR *vp;
-
-	if (!s->s3) {
-		DEBUG("ERROR: No SSLv3 information");
-		return;
-	}
-
-	vp = paircreate(PW_EAP_SESSION_ID, PW_TYPE_OCTETS);
-	if (!vp) return;
-
-	vp->vp_octets[0] = header & 0xff;
-	memcpy(vp->vp_octets + 1, s->s3->client_random, SSL3_RANDOM_SIZE);
-	memcpy(vp->vp_octets + 1 + SSL3_RANDOM_SIZE,
-	       s->s3->server_random, SSL3_RANDOM_SIZE);
-	vp->length = 1 + 2 * SSL3_RANDOM_SIZE;
-	pairadd(vps, vp);
+//	VALUE_PAIR *vp;
+//	uint8_t *p;
+//	vp = fr_pair_afrom_num(packet, 0, PW_EAP_SESSION_ID);
+//	if (!vp) return;
+//	p = talloc_array(vp, uint8_t, 1 + 2 * SSL3_RANDOM_SIZE);
+//	p[0] = header & 0xff;
+//
+//	SSL_get_client_random(s, p + 1, SSL3_RANDOM_SIZE);
+//	SSL_get_server_random(s, p + 1 + SSL3_RANDOM_SIZE, SSL3_RANDOM_SIZE);
+//
+//	fr_pair_value_memsteal(vp, p);
+//	fr_pair_add(&packet->vps, vp);
 }
--- a/src/modules/rlm_eap/types/rlm_eap_tls/rlm_eap_tls.c
+++ b/src/modules/rlm_eap/types/rlm_eap_tls/rlm_eap_tls.c
@@ -223,13 +223,14 @@ static int generate_eph_rsa_key(SSL_CTX *ctx)
 
 static void cbtls_remove_session(UNUSED SSL_CTX *ctx, SSL_SESSION *sess)
 {
-	size_t size;
+	unsigned int size;
 	char buffer[2 * MAX_SESSION_SIZE + 1];
 
-	size = sess->session_id_length;
+	const unsigned char *session_id = SSL_SESSION_get_id(sess, &size);
+//	size = sess->session_id_length;
 	if (size > MAX_SESSION_SIZE) size = MAX_SESSION_SIZE;
 
-	fr_bin2hex(sess->session_id, buffer, size);
+	fr_bin2hex(session_id, buffer, size);
 
         DEBUG2("  SSL: Removing session %s from the cache", buffer);
         SSL_SESSION_free(sess);
@@ -239,13 +240,13 @@ static void cbtls_remove_session(UNUSED SSL_CTX *ctx, SSL_SESSION *sess)
 
 static int cbtls_new_session(UNUSED SSL *s, SSL_SESSION *sess)
 {
-	size_t size;
+	unsigned int size;
 	char buffer[2 * MAX_SESSION_SIZE + 1];
 
-	size = sess->session_id_length;
+	const unsigned char *session_id = SSL_SESSION_get_id(sess, &size);
 	if (size > MAX_SESSION_SIZE) size = MAX_SESSION_SIZE;
 
-	fr_bin2hex(sess->session_id, buffer, size);
+	fr_bin2hex(session_id, buffer, size);
 
 	DEBUG2("  SSL: adding session %s to cache", buffer);
 
@@ -667,7 +668,7 @@ static int cbtls_verify(int ok, X509_STORE_CTX *ctx)
 			pairmake(cert_attr_names[EAPTLS_SUBJECT][lookup], subject, T_OP_SET));
 	}
 
-	X509_NAME_oneline(X509_get_issuer_name(ctx->current_cert), issuer,
+	X509_NAME_oneline(X509_get_issuer_name(client_cert), issuer,
 			  sizeof(issuer));
 	issuer[sizeof(issuer) - 1] = '\0';
 	if ((lookup <= 1) && issuer[0] && (strlen(issuer) < MAX_STRING_LEN)) {
@@ -740,8 +741,7 @@ static int cbtls_verify(int ok, X509_STORE_CTX *ctx)
 	}
 
 	if (lookup == 0) {
-		client_inf = client_cert->cert_info;
-		ext_list = client_inf->extensions;
+		ext_list = X509_get0_extensions(client_cert);
 	} else {
 		ext_list = NULL;
 	}
@@ -796,7 +796,7 @@ static int cbtls_verify(int ok, X509_STORE_CTX *ctx)
 		BIO_free_all(out);
 	}
 
-	switch (ctx->error) {
+	switch (X509_STORE_CTX_get_error(ctx)) {
 
 	case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT:
 		radlog(L_ERR, "issuer= %s\n", issuer);
@@ -1811,7 +1811,7 @@ static int eaptls_authenticate(void *arg, EAP_HANDLER *handler)
 	default:
 		if (inst->conf.session_cache_enable) {
 			SSL_CTX_remove_session(inst->ctx,
-					       tls_session->ssl->session);
+					       SSL_get_session(tls_session->ssl));
 		}
 
 		return 0;
